/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.webfontsdk.AccessKeyInfo', null, global);
goog.exportSymbol('proto.webfontsdk.CheckAccessKeyRequest', null, global);
goog.exportSymbol('proto.webfontsdk.FontBuildAccessKeyRequest', null, global);
goog.exportSymbol('proto.webfontsdk.FontBuildBufResult', null, global);
goog.exportSymbol('proto.webfontsdk.FontBuildRequest', null, global);
goog.exportSymbol('proto.webfontsdk.FontListRequest', null, global);
goog.exportSymbol('proto.webfontsdk.FontListResult', null, global);
goog.exportSymbol('proto.webfontsdk.FontMaker', null, global);
goog.exportSymbol('proto.webfontsdk.FontMetaInfo', null, global);
goog.exportSymbol('proto.webfontsdk.GetAccessKeyInfoRequest', null, global);
goog.exportSymbol('proto.webfontsdk.GetFontListReply', null, global);
goog.exportSymbol('proto.webfontsdk.GetFontListRequest', null, global);
goog.exportSymbol('proto.webfontsdk.GetFontMakerListReply', null, global);
goog.exportSymbol('proto.webfontsdk.GetFontMakerListRequest', null, global);
goog.exportSymbol('proto.webfontsdk.GetMultGlyfsUnicodeRequest', null, global);
goog.exportSymbol('proto.webfontsdk.GetMultGlyfsUnicodeResult', null, global);
goog.exportSymbol('proto.webfontsdk.GetProfileWithoutMapRequest', null, global);
goog.exportSymbol('proto.webfontsdk.GetProfileWithoutMapResult', null, global);
goog.exportSymbol('proto.webfontsdk.GetUseRateRequest', null, global);
goog.exportSymbol('proto.webfontsdk.GetUseRateResult', null, global);
goog.exportSymbol('proto.webfontsdk.HelloReply', null, global);
goog.exportSymbol('proto.webfontsdk.HelloRequest', null, global);
goog.exportSymbol('proto.webfontsdk.Language', null, global);
goog.exportSymbol('proto.webfontsdk.MakesureAccessKeyRequest', null, global);
goog.exportSymbol('proto.webfontsdk.MultFontBuildBufResult', null, global);
goog.exportSymbol('proto.webfontsdk.MultFontBuildRequest', null, global);
goog.exportSymbol('proto.webfontsdk.UseRate', null, global);
goog.exportSymbol('proto.webfontsdk.indexs', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.HelloRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.HelloRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.HelloRequest.displayName = 'proto.webfontsdk.HelloRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.HelloRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.HelloRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.HelloRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.HelloRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.HelloRequest}
 */
proto.webfontsdk.HelloRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.HelloRequest;
  return proto.webfontsdk.HelloRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.HelloRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.HelloRequest}
 */
proto.webfontsdk.HelloRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.HelloRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.HelloRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.HelloRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.HelloRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.webfontsdk.HelloRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.webfontsdk.HelloRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.HelloReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.HelloReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.HelloReply.displayName = 'proto.webfontsdk.HelloReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.HelloReply.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.HelloReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.HelloReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.HelloReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.HelloReply}
 */
proto.webfontsdk.HelloReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.HelloReply;
  return proto.webfontsdk.HelloReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.HelloReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.HelloReply}
 */
proto.webfontsdk.HelloReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.HelloReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.HelloReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.HelloReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.HelloReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.webfontsdk.HelloReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.webfontsdk.HelloReply.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.FontListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.FontListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.FontListRequest.displayName = 'proto.webfontsdk.FontListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.FontListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.FontListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.FontListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.FontListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    apikey: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.FontListRequest}
 */
proto.webfontsdk.FontListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.FontListRequest;
  return proto.webfontsdk.FontListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.FontListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.FontListRequest}
 */
proto.webfontsdk.FontListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.FontListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.FontListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.FontListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.FontListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApikey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string apikey = 1;
 * @return {string}
 */
proto.webfontsdk.FontListRequest.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.webfontsdk.FontListRequest.prototype.setApikey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.FontListResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.FontListResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.FontListResult.displayName = 'proto.webfontsdk.FontListResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.FontListResult.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.FontListResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.FontListResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.FontListResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    fontsMap: (f = msg.getFontsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.FontListResult}
 */
proto.webfontsdk.FontListResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.FontListResult;
  return proto.webfontsdk.FontListResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.FontListResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.FontListResult}
 */
proto.webfontsdk.FontListResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getFontsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readInt64, null, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.FontListResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.FontListResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.FontListResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.FontListResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFontsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeInt64);
  }
};


/**
 * map<uint32, int64> fonts = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.webfontsdk.FontListResult.prototype.getFontsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.webfontsdk.FontListResult.prototype.clearFontsMap = function() {
  this.getFontsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.FontBuildAccessKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.FontBuildAccessKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.FontBuildAccessKeyRequest.displayName = 'proto.webfontsdk.FontBuildAccessKeyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.FontBuildAccessKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.FontBuildAccessKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.FontBuildAccessKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.FontBuildAccessKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    apikey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accesskey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    text: jspb.Message.getFieldWithDefault(msg, 3, ""),
    needTtf: jspb.Message.getFieldWithDefault(msg, 4, false),
    needEot: jspb.Message.getFieldWithDefault(msg, 5, false),
    needWoff: jspb.Message.getFieldWithDefault(msg, 6, false),
    needWoff2: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.FontBuildAccessKeyRequest}
 */
proto.webfontsdk.FontBuildAccessKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.FontBuildAccessKeyRequest;
  return proto.webfontsdk.FontBuildAccessKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.FontBuildAccessKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.FontBuildAccessKeyRequest}
 */
proto.webfontsdk.FontBuildAccessKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesskey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedTtf(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedEot(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedWoff(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedWoff2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.FontBuildAccessKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.FontBuildAccessKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.FontBuildAccessKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.FontBuildAccessKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApikey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccesskey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNeedTtf();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getNeedEot();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getNeedWoff();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getNeedWoff2();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string apikey = 1;
 * @return {string}
 */
proto.webfontsdk.FontBuildAccessKeyRequest.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.webfontsdk.FontBuildAccessKeyRequest.prototype.setApikey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string accesskey = 2;
 * @return {string}
 */
proto.webfontsdk.FontBuildAccessKeyRequest.prototype.getAccesskey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.webfontsdk.FontBuildAccessKeyRequest.prototype.setAccesskey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string text = 3;
 * @return {string}
 */
proto.webfontsdk.FontBuildAccessKeyRequest.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.webfontsdk.FontBuildAccessKeyRequest.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool need_ttf = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.webfontsdk.FontBuildAccessKeyRequest.prototype.getNeedTtf = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.webfontsdk.FontBuildAccessKeyRequest.prototype.setNeedTtf = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool need_eot = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.webfontsdk.FontBuildAccessKeyRequest.prototype.getNeedEot = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.webfontsdk.FontBuildAccessKeyRequest.prototype.setNeedEot = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool need_woff = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.webfontsdk.FontBuildAccessKeyRequest.prototype.getNeedWoff = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.webfontsdk.FontBuildAccessKeyRequest.prototype.setNeedWoff = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool need_woff2 = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.webfontsdk.FontBuildAccessKeyRequest.prototype.getNeedWoff2 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.webfontsdk.FontBuildAccessKeyRequest.prototype.setNeedWoff2 = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.FontBuildRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.FontBuildRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.FontBuildRequest.displayName = 'proto.webfontsdk.FontBuildRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.FontBuildRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.FontBuildRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.FontBuildRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.FontBuildRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    apikey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fontId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    text: jspb.Message.getFieldWithDefault(msg, 3, ""),
    needTtf: jspb.Message.getFieldWithDefault(msg, 4, false),
    needEot: jspb.Message.getFieldWithDefault(msg, 5, false),
    needWoff: jspb.Message.getFieldWithDefault(msg, 6, false),
    needWoff2: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.FontBuildRequest}
 */
proto.webfontsdk.FontBuildRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.FontBuildRequest;
  return proto.webfontsdk.FontBuildRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.FontBuildRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.FontBuildRequest}
 */
proto.webfontsdk.FontBuildRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFontId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedTtf(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedEot(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedWoff(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedWoff2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.FontBuildRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.FontBuildRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.FontBuildRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.FontBuildRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApikey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFontId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNeedTtf();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getNeedEot();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getNeedWoff();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getNeedWoff2();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string apikey = 1;
 * @return {string}
 */
proto.webfontsdk.FontBuildRequest.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.webfontsdk.FontBuildRequest.prototype.setApikey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 font_id = 2;
 * @return {number}
 */
proto.webfontsdk.FontBuildRequest.prototype.getFontId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.webfontsdk.FontBuildRequest.prototype.setFontId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string text = 3;
 * @return {string}
 */
proto.webfontsdk.FontBuildRequest.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.webfontsdk.FontBuildRequest.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool need_ttf = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.webfontsdk.FontBuildRequest.prototype.getNeedTtf = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.webfontsdk.FontBuildRequest.prototype.setNeedTtf = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool need_eot = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.webfontsdk.FontBuildRequest.prototype.getNeedEot = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.webfontsdk.FontBuildRequest.prototype.setNeedEot = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool need_woff = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.webfontsdk.FontBuildRequest.prototype.getNeedWoff = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.webfontsdk.FontBuildRequest.prototype.setNeedWoff = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool need_woff2 = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.webfontsdk.FontBuildRequest.prototype.getNeedWoff2 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.webfontsdk.FontBuildRequest.prototype.setNeedWoff2 = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.MultFontBuildRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.webfontsdk.MultFontBuildRequest.repeatedFields_, null);
};
goog.inherits(proto.webfontsdk.MultFontBuildRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.MultFontBuildRequest.displayName = 'proto.webfontsdk.MultFontBuildRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.webfontsdk.MultFontBuildRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.MultFontBuildRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.MultFontBuildRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.MultFontBuildRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.MultFontBuildRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.webfontsdk.FontBuildRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.MultFontBuildRequest}
 */
proto.webfontsdk.MultFontBuildRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.MultFontBuildRequest;
  return proto.webfontsdk.MultFontBuildRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.MultFontBuildRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.MultFontBuildRequest}
 */
proto.webfontsdk.MultFontBuildRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.webfontsdk.FontBuildRequest;
      reader.readMessage(value,proto.webfontsdk.FontBuildRequest.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.MultFontBuildRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.MultFontBuildRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.MultFontBuildRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.MultFontBuildRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.webfontsdk.FontBuildRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FontBuildRequest items = 1;
 * @return {!Array<!proto.webfontsdk.FontBuildRequest>}
 */
proto.webfontsdk.MultFontBuildRequest.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.webfontsdk.FontBuildRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.webfontsdk.FontBuildRequest, 1));
};


/** @param {!Array<!proto.webfontsdk.FontBuildRequest>} value */
proto.webfontsdk.MultFontBuildRequest.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.webfontsdk.FontBuildRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.webfontsdk.FontBuildRequest}
 */
proto.webfontsdk.MultFontBuildRequest.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.webfontsdk.FontBuildRequest, opt_index);
};


proto.webfontsdk.MultFontBuildRequest.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.FontBuildBufResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.FontBuildBufResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.FontBuildBufResult.displayName = 'proto.webfontsdk.FontBuildBufResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.FontBuildBufResult.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.FontBuildBufResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.FontBuildBufResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.FontBuildBufResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    fontId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fontFormatVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fontChecksum: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nameEn: jspb.Message.getFieldWithDefault(msg, 4, ""),
    bytesTtf: msg.getBytesTtf_asB64(),
    bytesEot: msg.getBytesEot_asB64(),
    bytesWoff: msg.getBytesWoff_asB64(),
    bytesWoff2: msg.getBytesWoff2_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.FontBuildBufResult}
 */
proto.webfontsdk.FontBuildBufResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.FontBuildBufResult;
  return proto.webfontsdk.FontBuildBufResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.FontBuildBufResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.FontBuildBufResult}
 */
proto.webfontsdk.FontBuildBufResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFontId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFontFormatVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFontChecksum(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameEn(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesTtf(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesEot(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesWoff(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesWoff2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.FontBuildBufResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.FontBuildBufResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.FontBuildBufResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.FontBuildBufResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFontId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getFontFormatVersion();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFontChecksum();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNameEn();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBytesTtf_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getBytesEot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getBytesWoff_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getBytesWoff2_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional uint32 font_id = 1;
 * @return {number}
 */
proto.webfontsdk.FontBuildBufResult.prototype.getFontId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.webfontsdk.FontBuildBufResult.prototype.setFontId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 font_format_version = 2;
 * @return {number}
 */
proto.webfontsdk.FontBuildBufResult.prototype.getFontFormatVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.webfontsdk.FontBuildBufResult.prototype.setFontFormatVersion = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 font_checksum = 3;
 * @return {number}
 */
proto.webfontsdk.FontBuildBufResult.prototype.getFontChecksum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.webfontsdk.FontBuildBufResult.prototype.setFontChecksum = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name_en = 4;
 * @return {string}
 */
proto.webfontsdk.FontBuildBufResult.prototype.getNameEn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.webfontsdk.FontBuildBufResult.prototype.setNameEn = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes bytes_ttf = 5;
 * @return {!(string|Uint8Array)}
 */
proto.webfontsdk.FontBuildBufResult.prototype.getBytesTtf = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes bytes_ttf = 5;
 * This is a type-conversion wrapper around `getBytesTtf()`
 * @return {string}
 */
proto.webfontsdk.FontBuildBufResult.prototype.getBytesTtf_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesTtf()));
};


/**
 * optional bytes bytes_ttf = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesTtf()`
 * @return {!Uint8Array}
 */
proto.webfontsdk.FontBuildBufResult.prototype.getBytesTtf_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesTtf()));
};


/** @param {!(string|Uint8Array)} value */
proto.webfontsdk.FontBuildBufResult.prototype.setBytesTtf = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes bytes_eot = 6;
 * @return {!(string|Uint8Array)}
 */
proto.webfontsdk.FontBuildBufResult.prototype.getBytesEot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes bytes_eot = 6;
 * This is a type-conversion wrapper around `getBytesEot()`
 * @return {string}
 */
proto.webfontsdk.FontBuildBufResult.prototype.getBytesEot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesEot()));
};


/**
 * optional bytes bytes_eot = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesEot()`
 * @return {!Uint8Array}
 */
proto.webfontsdk.FontBuildBufResult.prototype.getBytesEot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesEot()));
};


/** @param {!(string|Uint8Array)} value */
proto.webfontsdk.FontBuildBufResult.prototype.setBytesEot = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes bytes_woff = 7;
 * @return {!(string|Uint8Array)}
 */
proto.webfontsdk.FontBuildBufResult.prototype.getBytesWoff = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes bytes_woff = 7;
 * This is a type-conversion wrapper around `getBytesWoff()`
 * @return {string}
 */
proto.webfontsdk.FontBuildBufResult.prototype.getBytesWoff_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesWoff()));
};


/**
 * optional bytes bytes_woff = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesWoff()`
 * @return {!Uint8Array}
 */
proto.webfontsdk.FontBuildBufResult.prototype.getBytesWoff_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesWoff()));
};


/** @param {!(string|Uint8Array)} value */
proto.webfontsdk.FontBuildBufResult.prototype.setBytesWoff = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes bytes_woff2 = 8;
 * @return {!(string|Uint8Array)}
 */
proto.webfontsdk.FontBuildBufResult.prototype.getBytesWoff2 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes bytes_woff2 = 8;
 * This is a type-conversion wrapper around `getBytesWoff2()`
 * @return {string}
 */
proto.webfontsdk.FontBuildBufResult.prototype.getBytesWoff2_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesWoff2()));
};


/**
 * optional bytes bytes_woff2 = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesWoff2()`
 * @return {!Uint8Array}
 */
proto.webfontsdk.FontBuildBufResult.prototype.getBytesWoff2_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesWoff2()));
};


/** @param {!(string|Uint8Array)} value */
proto.webfontsdk.FontBuildBufResult.prototype.setBytesWoff2 = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.MultFontBuildBufResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.webfontsdk.MultFontBuildBufResult.repeatedFields_, null);
};
goog.inherits(proto.webfontsdk.MultFontBuildBufResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.MultFontBuildBufResult.displayName = 'proto.webfontsdk.MultFontBuildBufResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.webfontsdk.MultFontBuildBufResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.MultFontBuildBufResult.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.MultFontBuildBufResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.MultFontBuildBufResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.MultFontBuildBufResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.webfontsdk.FontBuildBufResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.MultFontBuildBufResult}
 */
proto.webfontsdk.MultFontBuildBufResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.MultFontBuildBufResult;
  return proto.webfontsdk.MultFontBuildBufResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.MultFontBuildBufResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.MultFontBuildBufResult}
 */
proto.webfontsdk.MultFontBuildBufResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.webfontsdk.FontBuildBufResult;
      reader.readMessage(value,proto.webfontsdk.FontBuildBufResult.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.MultFontBuildBufResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.MultFontBuildBufResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.MultFontBuildBufResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.MultFontBuildBufResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.webfontsdk.FontBuildBufResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FontBuildBufResult items = 1;
 * @return {!Array<!proto.webfontsdk.FontBuildBufResult>}
 */
proto.webfontsdk.MultFontBuildBufResult.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.webfontsdk.FontBuildBufResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.webfontsdk.FontBuildBufResult, 1));
};


/** @param {!Array<!proto.webfontsdk.FontBuildBufResult>} value */
proto.webfontsdk.MultFontBuildBufResult.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.webfontsdk.FontBuildBufResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.webfontsdk.FontBuildBufResult}
 */
proto.webfontsdk.MultFontBuildBufResult.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.webfontsdk.FontBuildBufResult, opt_index);
};


proto.webfontsdk.MultFontBuildBufResult.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.GetProfileWithoutMapRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.GetProfileWithoutMapRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.GetProfileWithoutMapRequest.displayName = 'proto.webfontsdk.GetProfileWithoutMapRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.GetProfileWithoutMapRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.GetProfileWithoutMapRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.GetProfileWithoutMapRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetProfileWithoutMapRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    apikey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fontId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.GetProfileWithoutMapRequest}
 */
proto.webfontsdk.GetProfileWithoutMapRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.GetProfileWithoutMapRequest;
  return proto.webfontsdk.GetProfileWithoutMapRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.GetProfileWithoutMapRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.GetProfileWithoutMapRequest}
 */
proto.webfontsdk.GetProfileWithoutMapRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFontId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.GetProfileWithoutMapRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.GetProfileWithoutMapRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.GetProfileWithoutMapRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetProfileWithoutMapRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApikey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFontId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string apikey = 1;
 * @return {string}
 */
proto.webfontsdk.GetProfileWithoutMapRequest.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.webfontsdk.GetProfileWithoutMapRequest.prototype.setApikey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 font_id = 2;
 * @return {number}
 */
proto.webfontsdk.GetProfileWithoutMapRequest.prototype.getFontId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.webfontsdk.GetProfileWithoutMapRequest.prototype.setFontId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.GetProfileWithoutMapResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.GetProfileWithoutMapResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.GetProfileWithoutMapResult.displayName = 'proto.webfontsdk.GetProfileWithoutMapResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.GetProfileWithoutMapResult.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.GetProfileWithoutMapResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.GetProfileWithoutMapResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetProfileWithoutMapResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    fontId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.GetProfileWithoutMapResult}
 */
proto.webfontsdk.GetProfileWithoutMapResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.GetProfileWithoutMapResult;
  return proto.webfontsdk.GetProfileWithoutMapResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.GetProfileWithoutMapResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.GetProfileWithoutMapResult}
 */
proto.webfontsdk.GetProfileWithoutMapResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFontId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.GetProfileWithoutMapResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.GetProfileWithoutMapResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.GetProfileWithoutMapResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetProfileWithoutMapResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFontId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 font_id = 1;
 * @return {number}
 */
proto.webfontsdk.GetProfileWithoutMapResult.prototype.getFontId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.webfontsdk.GetProfileWithoutMapResult.prototype.setFontId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.webfontsdk.GetProfileWithoutMapResult.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.webfontsdk.GetProfileWithoutMapResult.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.webfontsdk.GetProfileWithoutMapResult.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.webfontsdk.GetProfileWithoutMapResult.prototype.setData = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.GetMultGlyfsUnicodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.webfontsdk.GetMultGlyfsUnicodeRequest.repeatedFields_, null);
};
goog.inherits(proto.webfontsdk.GetMultGlyfsUnicodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.GetMultGlyfsUnicodeRequest.displayName = 'proto.webfontsdk.GetMultGlyfsUnicodeRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.GetMultGlyfsUnicodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.GetMultGlyfsUnicodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    apikey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fontId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fontChecksum: jspb.Message.getFieldWithDefault(msg, 3, 0),
    unicodesList: jspb.Message.getRepeatedField(msg, 4),
    appendZero: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.GetMultGlyfsUnicodeRequest}
 */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.GetMultGlyfsUnicodeRequest;
  return proto.webfontsdk.GetMultGlyfsUnicodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.GetMultGlyfsUnicodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.GetMultGlyfsUnicodeRequest}
 */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFontId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFontChecksum(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setUnicodesList(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAppendZero(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.GetMultGlyfsUnicodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.GetMultGlyfsUnicodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApikey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFontId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getFontChecksum();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getUnicodesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = message.getAppendZero();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string apikey = 1;
 * @return {string}
 */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.prototype.getApikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.prototype.setApikey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 font_id = 2;
 * @return {number}
 */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.prototype.getFontId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.prototype.setFontId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 font_checksum = 3;
 * @return {number}
 */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.prototype.getFontChecksum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.prototype.setFontChecksum = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated uint32 unicodes = 4;
 * @return {!Array<number>}
 */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.prototype.getUnicodesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<number>} value */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.prototype.setUnicodesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.prototype.addUnicodes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.webfontsdk.GetMultGlyfsUnicodeRequest.prototype.clearUnicodesList = function() {
  this.setUnicodesList([]);
};


/**
 * optional bool append_zero = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.prototype.getAppendZero = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.webfontsdk.GetMultGlyfsUnicodeRequest.prototype.setAppendZero = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.indexs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.webfontsdk.indexs.repeatedFields_, null);
};
goog.inherits(proto.webfontsdk.indexs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.indexs.displayName = 'proto.webfontsdk.indexs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.webfontsdk.indexs.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.indexs.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.indexs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.indexs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.indexs.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.indexs}
 */
proto.webfontsdk.indexs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.indexs;
  return proto.webfontsdk.indexs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.indexs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.indexs}
 */
proto.webfontsdk.indexs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setItemsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.indexs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.indexs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.indexs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.indexs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
};


/**
 * repeated uint32 items = 2;
 * @return {!Array<number>}
 */
proto.webfontsdk.indexs.prototype.getItemsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.webfontsdk.indexs.prototype.setItemsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.webfontsdk.indexs.prototype.addItems = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.webfontsdk.indexs.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.GetMultGlyfsUnicodeResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.GetMultGlyfsUnicodeResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.GetMultGlyfsUnicodeResult.displayName = 'proto.webfontsdk.GetMultGlyfsUnicodeResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.GetMultGlyfsUnicodeResult.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.GetMultGlyfsUnicodeResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.GetMultGlyfsUnicodeResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetMultGlyfsUnicodeResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    unicodesMap: (f = msg.getUnicodesMap()) ? f.toObject(includeInstance, proto.webfontsdk.indexs.toObject) : [],
    indexsMap: (f = msg.getIndexsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.GetMultGlyfsUnicodeResult}
 */
proto.webfontsdk.GetMultGlyfsUnicodeResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.GetMultGlyfsUnicodeResult;
  return proto.webfontsdk.GetMultGlyfsUnicodeResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.GetMultGlyfsUnicodeResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.GetMultGlyfsUnicodeResult}
 */
proto.webfontsdk.GetMultGlyfsUnicodeResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getUnicodesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.webfontsdk.indexs.deserializeBinaryFromReader, 0);
         });
      break;
    case 3:
      var value = msg.getIndexsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readBytes, null, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.GetMultGlyfsUnicodeResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.GetMultGlyfsUnicodeResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.GetMultGlyfsUnicodeResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetMultGlyfsUnicodeResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnicodesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.webfontsdk.indexs.serializeBinaryToWriter);
  }
  f = message.getIndexsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeBytes);
  }
};


/**
 * map<uint32, indexs> unicodes = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.webfontsdk.indexs>}
 */
proto.webfontsdk.GetMultGlyfsUnicodeResult.prototype.getUnicodesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.webfontsdk.indexs>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.webfontsdk.indexs));
};


proto.webfontsdk.GetMultGlyfsUnicodeResult.prototype.clearUnicodesMap = function() {
  this.getUnicodesMap().clear();
};


/**
 * map<uint32, bytes> indexs = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!(string|Uint8Array)>}
 */
proto.webfontsdk.GetMultGlyfsUnicodeResult.prototype.getIndexsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.webfontsdk.GetMultGlyfsUnicodeResult.prototype.clearIndexsMap = function() {
  this.getIndexsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.GetFontMakerListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.GetFontMakerListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.GetFontMakerListRequest.displayName = 'proto.webfontsdk.GetFontMakerListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.GetFontMakerListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.GetFontMakerListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.GetFontMakerListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetFontMakerListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.GetFontMakerListRequest}
 */
proto.webfontsdk.GetFontMakerListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.GetFontMakerListRequest;
  return proto.webfontsdk.GetFontMakerListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.GetFontMakerListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.GetFontMakerListRequest}
 */
proto.webfontsdk.GetFontMakerListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.GetFontMakerListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.GetFontMakerListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.GetFontMakerListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetFontMakerListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.GetFontMakerListReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.webfontsdk.GetFontMakerListReply.repeatedFields_, null);
};
goog.inherits(proto.webfontsdk.GetFontMakerListReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.GetFontMakerListReply.displayName = 'proto.webfontsdk.GetFontMakerListReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.webfontsdk.GetFontMakerListReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.GetFontMakerListReply.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.GetFontMakerListReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.GetFontMakerListReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetFontMakerListReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.webfontsdk.FontMaker.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.GetFontMakerListReply}
 */
proto.webfontsdk.GetFontMakerListReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.GetFontMakerListReply;
  return proto.webfontsdk.GetFontMakerListReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.GetFontMakerListReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.GetFontMakerListReply}
 */
proto.webfontsdk.GetFontMakerListReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.webfontsdk.FontMaker;
      reader.readMessage(value,proto.webfontsdk.FontMaker.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.GetFontMakerListReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.GetFontMakerListReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.GetFontMakerListReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetFontMakerListReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.webfontsdk.FontMaker.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FontMaker items = 1;
 * @return {!Array<!proto.webfontsdk.FontMaker>}
 */
proto.webfontsdk.GetFontMakerListReply.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.webfontsdk.FontMaker>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.webfontsdk.FontMaker, 1));
};


/** @param {!Array<!proto.webfontsdk.FontMaker>} value */
proto.webfontsdk.GetFontMakerListReply.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.webfontsdk.FontMaker=} opt_value
 * @param {number=} opt_index
 * @return {!proto.webfontsdk.FontMaker}
 */
proto.webfontsdk.GetFontMakerListReply.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.webfontsdk.FontMaker, opt_index);
};


proto.webfontsdk.GetFontMakerListReply.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.GetFontListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.GetFontListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.GetFontListRequest.displayName = 'proto.webfontsdk.GetFontListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.GetFontListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.GetFontListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.GetFontListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetFontListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    makerId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.GetFontListRequest}
 */
proto.webfontsdk.GetFontListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.GetFontListRequest;
  return proto.webfontsdk.GetFontListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.GetFontListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.GetFontListRequest}
 */
proto.webfontsdk.GetFontListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMakerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.GetFontListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.GetFontListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.GetFontListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetFontListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMakerId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 maker_id = 1;
 * @return {number}
 */
proto.webfontsdk.GetFontListRequest.prototype.getMakerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.webfontsdk.GetFontListRequest.prototype.setMakerId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.GetFontListReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.webfontsdk.GetFontListReply.repeatedFields_, null);
};
goog.inherits(proto.webfontsdk.GetFontListReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.GetFontListReply.displayName = 'proto.webfontsdk.GetFontListReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.webfontsdk.GetFontListReply.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.GetFontListReply.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.GetFontListReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.GetFontListReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetFontListReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.webfontsdk.FontMetaInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.GetFontListReply}
 */
proto.webfontsdk.GetFontListReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.GetFontListReply;
  return proto.webfontsdk.GetFontListReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.GetFontListReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.GetFontListReply}
 */
proto.webfontsdk.GetFontListReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.webfontsdk.FontMetaInfo;
      reader.readMessage(value,proto.webfontsdk.FontMetaInfo.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.GetFontListReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.GetFontListReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.GetFontListReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetFontListReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.webfontsdk.FontMetaInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FontMetaInfo items = 2;
 * @return {!Array<!proto.webfontsdk.FontMetaInfo>}
 */
proto.webfontsdk.GetFontListReply.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.webfontsdk.FontMetaInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.webfontsdk.FontMetaInfo, 2));
};


/** @param {!Array<!proto.webfontsdk.FontMetaInfo>} value */
proto.webfontsdk.GetFontListReply.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.webfontsdk.FontMetaInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.webfontsdk.FontMetaInfo}
 */
proto.webfontsdk.GetFontListReply.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.webfontsdk.FontMetaInfo, opt_index);
};


proto.webfontsdk.GetFontListReply.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.FontMaker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.FontMaker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.FontMaker.displayName = 'proto.webfontsdk.FontMaker';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.FontMaker.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.FontMaker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.FontMaker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.FontMaker.toObject = function(includeInstance, msg) {
  var f, obj = {
    makerId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    url: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nameEn: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nameCn: jspb.Message.getFieldWithDefault(msg, 4, ""),
    nameTw: jspb.Message.getFieldWithDefault(msg, 5, ""),
    nameJp: jspb.Message.getFieldWithDefault(msg, 6, ""),
    nameKr: jspb.Message.getFieldWithDefault(msg, 7, ""),
    introEn: jspb.Message.getFieldWithDefault(msg, 8, ""),
    introCn: jspb.Message.getFieldWithDefault(msg, 9, ""),
    introTw: jspb.Message.getFieldWithDefault(msg, 10, ""),
    introJp: jspb.Message.getFieldWithDefault(msg, 11, ""),
    introKr: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.FontMaker}
 */
proto.webfontsdk.FontMaker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.FontMaker;
  return proto.webfontsdk.FontMaker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.FontMaker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.FontMaker}
 */
proto.webfontsdk.FontMaker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMakerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameEn(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameCn(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameTw(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameJp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameKr(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntroEn(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntroCn(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntroTw(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntroJp(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntroKr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.FontMaker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.FontMaker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.FontMaker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.FontMaker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMakerId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNameEn();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNameCn();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNameTw();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNameJp();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getNameKr();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getIntroEn();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getIntroCn();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIntroTw();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIntroJp();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIntroKr();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional uint32 maker_id = 1;
 * @return {number}
 */
proto.webfontsdk.FontMaker.prototype.getMakerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.webfontsdk.FontMaker.prototype.setMakerId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.webfontsdk.FontMaker.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMaker.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name_en = 3;
 * @return {string}
 */
proto.webfontsdk.FontMaker.prototype.getNameEn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMaker.prototype.setNameEn = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name_cn = 4;
 * @return {string}
 */
proto.webfontsdk.FontMaker.prototype.getNameCn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMaker.prototype.setNameCn = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name_tw = 5;
 * @return {string}
 */
proto.webfontsdk.FontMaker.prototype.getNameTw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMaker.prototype.setNameTw = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string name_jp = 6;
 * @return {string}
 */
proto.webfontsdk.FontMaker.prototype.getNameJp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMaker.prototype.setNameJp = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string name_kr = 7;
 * @return {string}
 */
proto.webfontsdk.FontMaker.prototype.getNameKr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMaker.prototype.setNameKr = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string intro_en = 8;
 * @return {string}
 */
proto.webfontsdk.FontMaker.prototype.getIntroEn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMaker.prototype.setIntroEn = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string intro_cn = 9;
 * @return {string}
 */
proto.webfontsdk.FontMaker.prototype.getIntroCn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMaker.prototype.setIntroCn = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string intro_tw = 10;
 * @return {string}
 */
proto.webfontsdk.FontMaker.prototype.getIntroTw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMaker.prototype.setIntroTw = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string intro_jp = 11;
 * @return {string}
 */
proto.webfontsdk.FontMaker.prototype.getIntroJp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMaker.prototype.setIntroJp = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string intro_kr = 12;
 * @return {string}
 */
proto.webfontsdk.FontMaker.prototype.getIntroKr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMaker.prototype.setIntroKr = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.FontMetaInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.webfontsdk.FontMetaInfo.repeatedFields_, null);
};
goog.inherits(proto.webfontsdk.FontMetaInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.FontMetaInfo.displayName = 'proto.webfontsdk.FontMetaInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.webfontsdk.FontMetaInfo.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.FontMetaInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.FontMetaInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.FontMetaInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.FontMetaInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    fontId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    makerId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nameEn: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nameCn: jspb.Message.getFieldWithDefault(msg, 4, ""),
    nameTw: jspb.Message.getFieldWithDefault(msg, 5, ""),
    nameJp: jspb.Message.getFieldWithDefault(msg, 6, ""),
    nameKr: jspb.Message.getFieldWithDefault(msg, 7, ""),
    introEn: jspb.Message.getFieldWithDefault(msg, 8, ""),
    introCn: jspb.Message.getFieldWithDefault(msg, 9, ""),
    introTw: jspb.Message.getFieldWithDefault(msg, 10, ""),
    introJp: jspb.Message.getFieldWithDefault(msg, 11, ""),
    introKr: jspb.Message.getFieldWithDefault(msg, 12, ""),
    langList: jspb.Message.getRepeatedField(msg, 13),
    crPriceMonth: jspb.Message.getFieldWithDefault(msg, 14, 0),
    crPriceYear: jspb.Message.getFieldWithDefault(msg, 15, 0),
    crPriceCssdownload: jspb.Message.getFieldWithDefault(msg, 16, 0),
    cdnFree: jspb.Message.getFieldWithDefault(msg, 17, false),
    crBuyOnMakersite: jspb.Message.getFieldWithDefault(msg, 18, false),
    crUrlOnMakersite: jspb.Message.getFieldWithDefault(msg, 19, ""),
    serviceFeeOfOnlineMonth: jspb.Message.getFieldWithDefault(msg, 20, 0),
    serviceFeeOfOnlineYear: jspb.Message.getFieldWithDefault(msg, 21, 0),
    serviceFeeOfAttorneyMonth: jspb.Message.getFieldWithDefault(msg, 22, 0),
    serviceFeeOfAttorneyYear: jspb.Message.getFieldWithDefault(msg, 23, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.FontMetaInfo}
 */
proto.webfontsdk.FontMetaInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.FontMetaInfo;
  return proto.webfontsdk.FontMetaInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.FontMetaInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.FontMetaInfo}
 */
proto.webfontsdk.FontMetaInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFontId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMakerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameEn(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameCn(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameTw(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameJp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNameKr(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntroEn(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntroCn(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntroTw(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntroJp(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntroKr(value);
      break;
    case 13:
      var value = /** @type {!Array<!proto.webfontsdk.Language>} */ (reader.readPackedEnum());
      msg.setLangList(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCrPriceMonth(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCrPriceYear(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCrPriceCssdownload(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCdnFree(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCrBuyOnMakersite(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setCrUrlOnMakersite(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServiceFeeOfOnlineMonth(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServiceFeeOfOnlineYear(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServiceFeeOfAttorneyMonth(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServiceFeeOfAttorneyYear(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.FontMetaInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.FontMetaInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.FontMetaInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.FontMetaInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFontId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMakerId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getNameEn();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNameCn();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNameTw();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNameJp();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getNameKr();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getIntroEn();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getIntroCn();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIntroTw();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getIntroJp();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getIntroKr();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getLangList();
  if (f.length > 0) {
    writer.writePackedEnum(
      13,
      f
    );
  }
  f = message.getCrPriceMonth();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getCrPriceYear();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getCrPriceCssdownload();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getCdnFree();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = message.getCrBuyOnMakersite();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = message.getCrUrlOnMakersite();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getServiceFeeOfOnlineMonth();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = message.getServiceFeeOfOnlineYear();
  if (f !== 0) {
    writer.writeUint32(
      21,
      f
    );
  }
  f = message.getServiceFeeOfAttorneyMonth();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getServiceFeeOfAttorneyYear();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
};


/**
 * optional uint32 font_id = 1;
 * @return {number}
 */
proto.webfontsdk.FontMetaInfo.prototype.getFontId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.webfontsdk.FontMetaInfo.prototype.setFontId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 maker_id = 2;
 * @return {number}
 */
proto.webfontsdk.FontMetaInfo.prototype.getMakerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.webfontsdk.FontMetaInfo.prototype.setMakerId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name_en = 3;
 * @return {string}
 */
proto.webfontsdk.FontMetaInfo.prototype.getNameEn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMetaInfo.prototype.setNameEn = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string name_cn = 4;
 * @return {string}
 */
proto.webfontsdk.FontMetaInfo.prototype.getNameCn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMetaInfo.prototype.setNameCn = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name_tw = 5;
 * @return {string}
 */
proto.webfontsdk.FontMetaInfo.prototype.getNameTw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMetaInfo.prototype.setNameTw = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string name_jp = 6;
 * @return {string}
 */
proto.webfontsdk.FontMetaInfo.prototype.getNameJp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMetaInfo.prototype.setNameJp = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string name_kr = 7;
 * @return {string}
 */
proto.webfontsdk.FontMetaInfo.prototype.getNameKr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMetaInfo.prototype.setNameKr = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string intro_en = 8;
 * @return {string}
 */
proto.webfontsdk.FontMetaInfo.prototype.getIntroEn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMetaInfo.prototype.setIntroEn = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string intro_cn = 9;
 * @return {string}
 */
proto.webfontsdk.FontMetaInfo.prototype.getIntroCn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMetaInfo.prototype.setIntroCn = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string intro_tw = 10;
 * @return {string}
 */
proto.webfontsdk.FontMetaInfo.prototype.getIntroTw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMetaInfo.prototype.setIntroTw = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string intro_jp = 11;
 * @return {string}
 */
proto.webfontsdk.FontMetaInfo.prototype.getIntroJp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMetaInfo.prototype.setIntroJp = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string intro_kr = 12;
 * @return {string}
 */
proto.webfontsdk.FontMetaInfo.prototype.getIntroKr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMetaInfo.prototype.setIntroKr = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * repeated Language lang = 13;
 * @return {!Array<!proto.webfontsdk.Language>}
 */
proto.webfontsdk.FontMetaInfo.prototype.getLangList = function() {
  return /** @type {!Array<!proto.webfontsdk.Language>} */ (jspb.Message.getRepeatedField(this, 13));
};


/** @param {!Array<!proto.webfontsdk.Language>} value */
proto.webfontsdk.FontMetaInfo.prototype.setLangList = function(value) {
  jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {!proto.webfontsdk.Language} value
 * @param {number=} opt_index
 */
proto.webfontsdk.FontMetaInfo.prototype.addLang = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


proto.webfontsdk.FontMetaInfo.prototype.clearLangList = function() {
  this.setLangList([]);
};


/**
 * optional int32 cr_price_month = 14;
 * @return {number}
 */
proto.webfontsdk.FontMetaInfo.prototype.getCrPriceMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.webfontsdk.FontMetaInfo.prototype.setCrPriceMonth = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 cr_price_year = 15;
 * @return {number}
 */
proto.webfontsdk.FontMetaInfo.prototype.getCrPriceYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.webfontsdk.FontMetaInfo.prototype.setCrPriceYear = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 cr_price_cssdownload = 16;
 * @return {number}
 */
proto.webfontsdk.FontMetaInfo.prototype.getCrPriceCssdownload = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.webfontsdk.FontMetaInfo.prototype.setCrPriceCssdownload = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional bool cdn_free = 17;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.webfontsdk.FontMetaInfo.prototype.getCdnFree = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 17, false));
};


/** @param {boolean} value */
proto.webfontsdk.FontMetaInfo.prototype.setCdnFree = function(value) {
  jspb.Message.setProto3BooleanField(this, 17, value);
};


/**
 * optional bool cr_buy_on_makersite = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.webfontsdk.FontMetaInfo.prototype.getCrBuyOnMakersite = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 18, false));
};


/** @param {boolean} value */
proto.webfontsdk.FontMetaInfo.prototype.setCrBuyOnMakersite = function(value) {
  jspb.Message.setProto3BooleanField(this, 18, value);
};


/**
 * optional string cr_url_on_makersite = 19;
 * @return {string}
 */
proto.webfontsdk.FontMetaInfo.prototype.getCrUrlOnMakersite = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto.webfontsdk.FontMetaInfo.prototype.setCrUrlOnMakersite = function(value) {
  jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional uint32 service_fee_of_online_month = 20;
 * @return {number}
 */
proto.webfontsdk.FontMetaInfo.prototype.getServiceFeeOfOnlineMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.webfontsdk.FontMetaInfo.prototype.setServiceFeeOfOnlineMonth = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional uint32 service_fee_of_online_year = 21;
 * @return {number}
 */
proto.webfontsdk.FontMetaInfo.prototype.getServiceFeeOfOnlineYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.webfontsdk.FontMetaInfo.prototype.setServiceFeeOfOnlineYear = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int32 service_fee_of_attorney_month = 22;
 * @return {number}
 */
proto.webfontsdk.FontMetaInfo.prototype.getServiceFeeOfAttorneyMonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.webfontsdk.FontMetaInfo.prototype.setServiceFeeOfAttorneyMonth = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int32 service_fee_of_attorney_year = 23;
 * @return {number}
 */
proto.webfontsdk.FontMetaInfo.prototype.getServiceFeeOfAttorneyYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.webfontsdk.FontMetaInfo.prototype.setServiceFeeOfAttorneyYear = function(value) {
  jspb.Message.setProto3IntField(this, 23, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.GetUseRateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.GetUseRateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.GetUseRateRequest.displayName = 'proto.webfontsdk.GetUseRateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.GetUseRateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.GetUseRateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.GetUseRateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetUseRateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.GetUseRateRequest}
 */
proto.webfontsdk.GetUseRateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.GetUseRateRequest;
  return proto.webfontsdk.GetUseRateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.GetUseRateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.GetUseRateRequest}
 */
proto.webfontsdk.GetUseRateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.GetUseRateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.GetUseRateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.GetUseRateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetUseRateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.UseRate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.UseRate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.UseRate.displayName = 'proto.webfontsdk.UseRate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.UseRate.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.UseRate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.UseRate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.UseRate.toObject = function(includeInstance, msg) {
  var f, obj = {
    fontId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.UseRate}
 */
proto.webfontsdk.UseRate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.UseRate;
  return proto.webfontsdk.UseRate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.UseRate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.UseRate}
 */
proto.webfontsdk.UseRate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFontId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.UseRate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.UseRate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.UseRate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.UseRate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFontId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 font_id = 1;
 * @return {number}
 */
proto.webfontsdk.UseRate.prototype.getFontId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.webfontsdk.UseRate.prototype.setFontId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 count = 2;
 * @return {number}
 */
proto.webfontsdk.UseRate.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.webfontsdk.UseRate.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.GetUseRateResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.GetUseRateResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.GetUseRateResult.displayName = 'proto.webfontsdk.GetUseRateResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.GetUseRateResult.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.GetUseRateResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.GetUseRateResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetUseRateResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsMap: (f = msg.getItemsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.GetUseRateResult}
 */
proto.webfontsdk.GetUseRateResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.GetUseRateResult;
  return proto.webfontsdk.GetUseRateResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.GetUseRateResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.GetUseRateResult}
 */
proto.webfontsdk.GetUseRateResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getItemsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32, null, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.GetUseRateResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.GetUseRateResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.GetUseRateResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetUseRateResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
};


/**
 * map<uint32, uint32> items = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.webfontsdk.GetUseRateResult.prototype.getItemsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.webfontsdk.GetUseRateResult.prototype.clearItemsMap = function() {
  this.getItemsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.GetAccessKeyInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.GetAccessKeyInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.GetAccessKeyInfoRequest.displayName = 'proto.webfontsdk.GetAccessKeyInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.GetAccessKeyInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.GetAccessKeyInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.GetAccessKeyInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetAccessKeyInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesskey: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.GetAccessKeyInfoRequest}
 */
proto.webfontsdk.GetAccessKeyInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.GetAccessKeyInfoRequest;
  return proto.webfontsdk.GetAccessKeyInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.GetAccessKeyInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.GetAccessKeyInfoRequest}
 */
proto.webfontsdk.GetAccessKeyInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesskey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.GetAccessKeyInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.GetAccessKeyInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.GetAccessKeyInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.GetAccessKeyInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesskey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string accesskey = 1;
 * @return {string}
 */
proto.webfontsdk.GetAccessKeyInfoRequest.prototype.getAccesskey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.webfontsdk.GetAccessKeyInfoRequest.prototype.setAccesskey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.CheckAccessKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.CheckAccessKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.CheckAccessKeyRequest.displayName = 'proto.webfontsdk.CheckAccessKeyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.CheckAccessKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.CheckAccessKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.CheckAccessKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.CheckAccessKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userUid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fontId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.CheckAccessKeyRequest}
 */
proto.webfontsdk.CheckAccessKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.CheckAccessKeyRequest;
  return proto.webfontsdk.CheckAccessKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.CheckAccessKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.CheckAccessKeyRequest}
 */
proto.webfontsdk.CheckAccessKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFontId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.CheckAccessKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.CheckAccessKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.CheckAccessKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.CheckAccessKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserUid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getFontId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint64 user_uid = 1;
 * @return {number}
 */
proto.webfontsdk.CheckAccessKeyRequest.prototype.getUserUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.webfontsdk.CheckAccessKeyRequest.prototype.setUserUid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 font_id = 2;
 * @return {number}
 */
proto.webfontsdk.CheckAccessKeyRequest.prototype.getFontId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.webfontsdk.CheckAccessKeyRequest.prototype.setFontId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.MakesureAccessKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.MakesureAccessKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.MakesureAccessKeyRequest.displayName = 'proto.webfontsdk.MakesureAccessKeyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.MakesureAccessKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.MakesureAccessKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.MakesureAccessKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.MakesureAccessKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userUid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    fontId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.MakesureAccessKeyRequest}
 */
proto.webfontsdk.MakesureAccessKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.MakesureAccessKeyRequest;
  return proto.webfontsdk.MakesureAccessKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.MakesureAccessKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.MakesureAccessKeyRequest}
 */
proto.webfontsdk.MakesureAccessKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFontId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.MakesureAccessKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.MakesureAccessKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.MakesureAccessKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.MakesureAccessKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserUid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getFontId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint64 user_uid = 1;
 * @return {number}
 */
proto.webfontsdk.MakesureAccessKeyRequest.prototype.getUserUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.webfontsdk.MakesureAccessKeyRequest.prototype.setUserUid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 font_id = 2;
 * @return {number}
 */
proto.webfontsdk.MakesureAccessKeyRequest.prototype.getFontId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.webfontsdk.MakesureAccessKeyRequest.prototype.setFontId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.webfontsdk.AccessKeyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.webfontsdk.AccessKeyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.webfontsdk.AccessKeyInfo.displayName = 'proto.webfontsdk.AccessKeyInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.webfontsdk.AccessKeyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.webfontsdk.AccessKeyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.webfontsdk.AccessKeyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.AccessKeyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesskey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userUid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fontId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    addTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    uuid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.webfontsdk.AccessKeyInfo}
 */
proto.webfontsdk.AccessKeyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.webfontsdk.AccessKeyInfo;
  return proto.webfontsdk.AccessKeyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.webfontsdk.AccessKeyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.webfontsdk.AccessKeyInfo}
 */
proto.webfontsdk.AccessKeyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesskey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserUid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFontId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAddTime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.webfontsdk.AccessKeyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.webfontsdk.AccessKeyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.webfontsdk.AccessKeyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.webfontsdk.AccessKeyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesskey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserUid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getFontId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getAddTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string accesskey = 1;
 * @return {string}
 */
proto.webfontsdk.AccessKeyInfo.prototype.getAccesskey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.webfontsdk.AccessKeyInfo.prototype.setAccesskey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 user_uid = 2;
 * @return {number}
 */
proto.webfontsdk.AccessKeyInfo.prototype.getUserUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.webfontsdk.AccessKeyInfo.prototype.setUserUid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 font_id = 3;
 * @return {number}
 */
proto.webfontsdk.AccessKeyInfo.prototype.getFontId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.webfontsdk.AccessKeyInfo.prototype.setFontId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 add_time = 4;
 * @return {number}
 */
proto.webfontsdk.AccessKeyInfo.prototype.getAddTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.webfontsdk.AccessKeyInfo.prototype.setAddTime = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string uuid = 5;
 * @return {string}
 */
proto.webfontsdk.AccessKeyInfo.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.webfontsdk.AccessKeyInfo.prototype.setUuid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.webfontsdk.Language = {
  UNKNOW: 0,
  ENGLISH: 1,
  SIMPLIFIED_CHINESE: 2,
  TRADITIONAL_CHINESE: 3,
  JAPANESE: 4,
  KOREAN: 5
};

goog.object.extend(exports, proto.webfontsdk);
