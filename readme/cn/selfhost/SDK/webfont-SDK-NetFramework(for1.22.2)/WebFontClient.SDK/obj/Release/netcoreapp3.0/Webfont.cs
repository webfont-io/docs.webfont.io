// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/webfont.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Webfontsdk {

  /// <summary>Holder for reflection information generated from Protos/webfont.proto</summary>
  public static partial class WebfontReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/webfont.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WebfontReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRQcm90b3Mvd2ViZm9udC5wcm90bxIKd2ViZm9udHNkayIhCg9Gb250TGlz",
            "dFJlcXVlc3QSDgoGYXBpa2V5GAEgASgJInQKDkZvbnRMaXN0UmVzdWx0EjQK",
            "BWZvbnRzGAEgAygLMiUud2ViZm9udHNkay5Gb250TGlzdFJlc3VsdC5Gb250",
            "c0VudHJ5GiwKCkZvbnRzRW50cnkSCwoDa2V5GAEgASgNEg0KBXZhbHVlGAIg",
            "ASgDOgI4ASKXAQoZRm9udEJ1aWxkQWNjZXNzS2V5UmVxdWVzdBIOCgZhcGlr",
            "ZXkYASABKAkSEQoJYWNjZXNza2V5GAIgASgJEgwKBHRleHQYAyABKAkSEAoI",
            "bmVlZF90dGYYBCABKAgSEAoIbmVlZF9lb3QYBSABKAgSEQoJbmVlZF93b2Zm",
            "GAYgASgIEhIKCm5lZWRfd29mZjIYByABKAgijAEKEEZvbnRCdWlsZFJlcXVl",
            "c3QSDgoGYXBpa2V5GAEgASgJEg8KB2ZvbnRfaWQYAiABKA0SDAoEdGV4dBgD",
            "IAEoCRIQCghuZWVkX3R0ZhgEIAEoCBIQCghuZWVkX2VvdBgFIAEoCBIRCglu",
            "ZWVkX3dvZmYYBiABKAgSEgoKbmVlZF93b2ZmMhgHIAEoCCJDChRNdWx0Rm9u",
            "dEJ1aWxkUmVxdWVzdBIrCgVpdGVtcxgBIAMoCzIcLndlYmZvbnRzZGsuRm9u",
            "dEJ1aWxkUmVxdWVzdCK5AQoSRm9udEJ1aWxkQnVmUmVzdWx0Eg8KB2ZvbnRf",
            "aWQYASABKA0SGwoTZm9udF9mb3JtYXRfdmVyc2lvbhgCIAEoDRIVCg1mb250",
            "X2NoZWNrc3VtGAMgASgEEg8KB25hbWVfZW4YBCABKAkSEQoJYnl0ZXNfdHRm",
            "GAUgASgMEhEKCWJ5dGVzX2VvdBgGIAEoDBISCgpieXRlc193b2ZmGAcgASgM",
            "EhMKC2J5dGVzX3dvZmYyGAggASgMIkcKFk11bHRGb250QnVpbGRCdWZSZXN1",
            "bHQSLQoFaXRlbXMYASADKAsyHi53ZWJmb250c2RrLkZvbnRCdWlsZEJ1ZlJl",
            "c3VsdCI+ChtHZXRQcm9maWxlV2l0aG91dE1hcFJlcXVlc3QSDgoGYXBpa2V5",
            "GAEgASgJEg8KB2ZvbnRfaWQYAiABKA0iOwoaR2V0UHJvZmlsZVdpdGhvdXRN",
            "YXBSZXN1bHQSDwoHZm9udF9pZBgBIAEoDRIMCgRkYXRhGAIgASgMInsKGkdl",
            "dE11bHRHbHlmc1VuaWNvZGVSZXF1ZXN0Eg4KBmFwaWtleRgBIAEoCRIPCgdm",
            "b250X2lkGAIgASgNEhUKDWZvbnRfY2hlY2tzdW0YAyABKA0SEAoIdW5pY29k",
            "ZXMYBCADKA0SEwoLYXBwZW5kX3plcm8YBSABKAgiFwoGaW5kZXhzEg0KBWl0",
            "ZW1zGAIgAygNIpkCChlHZXRNdWx0R2x5ZnNVbmljb2RlUmVzdWx0EkUKCHVu",
            "aWNvZGVzGAEgAygLMjMud2ViZm9udHNkay5HZXRNdWx0R2x5ZnNVbmljb2Rl",
            "UmVzdWx0LlVuaWNvZGVzRW50cnkSQQoGaW5kZXhzGAMgAygLMjEud2ViZm9u",
            "dHNkay5HZXRNdWx0R2x5ZnNVbmljb2RlUmVzdWx0LkluZGV4c0VudHJ5GkMK",
            "DVVuaWNvZGVzRW50cnkSCwoDa2V5GAEgASgNEiEKBXZhbHVlGAIgASgLMhIu",
            "d2ViZm9udHNkay5pbmRleHM6AjgBGi0KC0luZGV4c0VudHJ5EgsKA2tleRgB",
            "IAEoDRINCgV2YWx1ZRgCIAEoDDoCOAEiGQoXR2V0Rm9udE1ha2VyTGlzdFJl",
            "cXVlc3QiPQoVR2V0Rm9udE1ha2VyTGlzdFJlcGx5EiQKBWl0ZW1zGAEgAygL",
            "MhUud2ViZm9udHNkay5Gb250TWFrZXIiJgoSR2V0Rm9udExpc3RSZXF1ZXN0",
            "EhAKCG1ha2VyX2lkGAEgASgNIjsKEEdldEZvbnRMaXN0UmVwbHkSJwoFaXRl",
            "bXMYAiADKAsyGC53ZWJmb250c2RrLkZvbnRNZXRhSW5mbyLZAQoJRm9udE1h",
            "a2VyEhAKCG1ha2VyX2lkGAEgASgNEgsKA3VybBgCIAEoCRIPCgduYW1lX2Vu",
            "GAMgASgJEg8KB25hbWVfY24YBCABKAkSDwoHbmFtZV90dxgFIAEoCRIPCgdu",
            "YW1lX2pwGAYgASgJEg8KB25hbWVfa3IYByABKAkSEAoIaW50cm9fZW4YCCAB",
            "KAkSEAoIaW50cm9fY24YCSABKAkSEAoIaW50cm9fdHcYCiABKAkSEAoIaW50",
            "cm9fanAYCyABKAkSEAoIaW50cm9fa3IYDCABKAkiswQKDEZvbnRNZXRhSW5m",
            "bxIPCgdmb250X2lkGAEgASgNEhAKCG1ha2VyX2lkGAIgASgNEg8KB25hbWVf",
            "ZW4YAyABKAkSDwoHbmFtZV9jbhgEIAEoCRIPCgduYW1lX3R3GAUgASgJEg8K",
            "B25hbWVfanAYBiABKAkSDwoHbmFtZV9rchgHIAEoCRIQCghpbnRyb19lbhgI",
            "IAEoCRIQCghpbnRyb19jbhgJIAEoCRIQCghpbnRyb190dxgKIAEoCRIQCghp",
            "bnRyb19qcBgLIAEoCRIQCghpbnRyb19rchgMIAEoCRIiCgRsYW5nGA0gAygO",
            "MhQud2ViZm9udHNkay5MYW5ndWFnZRIWCg5jcl9wcmljZV9tb250aBgOIAEo",
            "BRIVCg1jcl9wcmljZV95ZWFyGA8gASgFEhwKFGNyX3ByaWNlX2Nzc2Rvd25s",
            "b2FkGBAgASgFEhAKCGNkbl9mcmVlGBEgASgIEhsKE2NyX2J1eV9vbl9tYWtl",
            "cnNpdGUYEiABKAgSGwoTY3JfdXJsX29uX21ha2Vyc2l0ZRgTIAEoCRIjChtz",
            "ZXJ2aWNlX2ZlZV9vZl9vbmxpbmVfbW9udGgYFCABKA0SIgoac2VydmljZV9m",
            "ZWVfb2Zfb25saW5lX3llYXIYFSABKA0SJQodc2VydmljZV9mZWVfb2ZfYXR0",
            "b3JuZXlfbW9udGgYFiABKAUSJAocc2VydmljZV9mZWVfb2ZfYXR0b3JuZXlf",
            "eWVhchgXIAEoBSITChFHZXRVc2VSYXRlUmVxdWVzdCIpCgdVc2VSYXRlEg8K",
            "B2ZvbnRfaWQYASABKA0SDQoFY291bnQYAiABKA0ieAoQR2V0VXNlUmF0ZVJl",
            "c3VsdBI2CgVpdGVtcxgBIAMoCzInLndlYmZvbnRzZGsuR2V0VXNlUmF0ZVJl",
            "c3VsdC5JdGVtc0VudHJ5GiwKCkl0ZW1zRW50cnkSCwoDa2V5GAEgASgNEg0K",
            "BXZhbHVlGAIgASgNOgI4ASIsChdHZXRBY2Nlc3NLZXlJbmZvUmVxdWVzdBIR",
            "CglhY2Nlc3NrZXkYASABKAkiOgoVQ2hlY2tBY2Nlc3NLZXlSZXF1ZXN0EhAK",
            "CHVzZXJfdWlkGAEgASgEEg8KB2ZvbnRfaWQYAiABKA0iPQoYTWFrZXN1cmVB",
            "Y2Nlc3NLZXlSZXF1ZXN0EhAKCHVzZXJfdWlkGAEgASgEEg8KB2ZvbnRfaWQY",
            "AiABKA0iZQoNQWNjZXNzS2V5SW5mbxIRCglhY2Nlc3NrZXkYASABKAkSEAoI",
            "dXNlcl91aWQYAiABKAQSDwoHZm9udF9pZBgDIAEoDRIQCghhZGRfdGltZRgE",
            "IAEoAxIMCgR1dWlkGAUgASgJKm4KCExhbmd1YWdlEgoKBlVOS05PVxAAEgsK",
            "B0VuZ2xpc2gQARIWChJTaW1wbGlmaWVkX0NoaW5lc2UQAhIXChNUcmFkaXRp",
            "b25hbF9DaGluZXNlEAMSDAoISmFwYW5lc2UQBBIKCgZLb3JlYW4QBTLQBQoH",
            "R3JlZXRlchJLCglCdWlsZEZvbnQSHC53ZWJmb250c2RrLkZvbnRCdWlsZFJl",
            "cXVlc3QaHi53ZWJmb250c2RrLkZvbnRCdWlsZEJ1ZlJlc3VsdCIAEmAKFUJ1",
            "aWxkRm9udEZvckFjY2Vzc0tleRIlLndlYmZvbnRzZGsuRm9udEJ1aWxkQWNj",
            "ZXNzS2V5UmVxdWVzdBoeLndlYmZvbnRzZGsuRm9udEJ1aWxkQnVmUmVzdWx0",
            "IgASVwoNTXVsdEJ1aWxkRm9udBIgLndlYmZvbnRzZGsuTXVsdEZvbnRCdWls",
            "ZFJlcXVlc3QaIi53ZWJmb250c2RrLk11bHRGb250QnVpbGRCdWZSZXN1bHQi",
            "ABJFCghGb250TGlzdBIbLndlYmZvbnRzZGsuRm9udExpc3RSZXF1ZXN0Ghou",
            "d2ViZm9udHNkay5Gb250TGlzdFJlc3VsdCIAEmkKFEdldFByb2ZpbGVXaXRo",
            "b3V0TWFwEicud2ViZm9udHNkay5HZXRQcm9maWxlV2l0aG91dE1hcFJlcXVl",
            "c3QaJi53ZWJmb250c2RrLkdldFByb2ZpbGVXaXRob3V0TWFwUmVzdWx0IgAS",
            "ZgoTR2V0TXVsdEdseWZzVW5pY29kZRImLndlYmZvbnRzZGsuR2V0TXVsdEds",
            "eWZzVW5pY29kZVJlcXVlc3QaJS53ZWJmb250c2RrLkdldE11bHRHbHlmc1Vu",
            "aWNvZGVSZXN1bHQiABJNCgtHZXRGb250TGlzdBIeLndlYmZvbnRzZGsuR2V0",
            "Rm9udExpc3RSZXF1ZXN0Ghwud2ViZm9udHNkay5HZXRGb250TGlzdFJlcGx5",
            "IgASVAoQR2V0QWNjZXNzS2V5SW5mbxIjLndlYmZvbnRzZGsuR2V0QWNjZXNz",
            "S2V5SW5mb1JlcXVlc3QaGS53ZWJmb250c2RrLkFjY2Vzc0tleUluZm8iAEIl",
            "ChNpby5ncnBjLnNkay53ZWJmb250QgxXZWJmb250UHJvdG9QAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Webfontsdk.Language), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.FontListRequest), global::Webfontsdk.FontListRequest.Parser, new[]{ "Apikey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.FontListResult), global::Webfontsdk.FontListResult.Parser, new[]{ "Fonts" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.FontBuildAccessKeyRequest), global::Webfontsdk.FontBuildAccessKeyRequest.Parser, new[]{ "Apikey", "Accesskey", "Text", "NeedTtf", "NeedEot", "NeedWoff", "NeedWoff2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.FontBuildRequest), global::Webfontsdk.FontBuildRequest.Parser, new[]{ "Apikey", "FontId", "Text", "NeedTtf", "NeedEot", "NeedWoff", "NeedWoff2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.MultFontBuildRequest), global::Webfontsdk.MultFontBuildRequest.Parser, new[]{ "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.FontBuildBufResult), global::Webfontsdk.FontBuildBufResult.Parser, new[]{ "FontId", "FontFormatVersion", "FontChecksum", "NameEn", "BytesTtf", "BytesEot", "BytesWoff", "BytesWoff2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.MultFontBuildBufResult), global::Webfontsdk.MultFontBuildBufResult.Parser, new[]{ "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.GetProfileWithoutMapRequest), global::Webfontsdk.GetProfileWithoutMapRequest.Parser, new[]{ "Apikey", "FontId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.GetProfileWithoutMapResult), global::Webfontsdk.GetProfileWithoutMapResult.Parser, new[]{ "FontId", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.GetMultGlyfsUnicodeRequest), global::Webfontsdk.GetMultGlyfsUnicodeRequest.Parser, new[]{ "Apikey", "FontId", "FontChecksum", "Unicodes", "AppendZero" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.indexs), global::Webfontsdk.indexs.Parser, new[]{ "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.GetMultGlyfsUnicodeResult), global::Webfontsdk.GetMultGlyfsUnicodeResult.Parser, new[]{ "Unicodes", "Indexs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.GetFontMakerListRequest), global::Webfontsdk.GetFontMakerListRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.GetFontMakerListReply), global::Webfontsdk.GetFontMakerListReply.Parser, new[]{ "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.GetFontListRequest), global::Webfontsdk.GetFontListRequest.Parser, new[]{ "MakerId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.GetFontListReply), global::Webfontsdk.GetFontListReply.Parser, new[]{ "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.FontMaker), global::Webfontsdk.FontMaker.Parser, new[]{ "MakerId", "Url", "NameEn", "NameCn", "NameTw", "NameJp", "NameKr", "IntroEn", "IntroCn", "IntroTw", "IntroJp", "IntroKr" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.FontMetaInfo), global::Webfontsdk.FontMetaInfo.Parser, new[]{ "FontId", "MakerId", "NameEn", "NameCn", "NameTw", "NameJp", "NameKr", "IntroEn", "IntroCn", "IntroTw", "IntroJp", "IntroKr", "Lang", "CrPriceMonth", "CrPriceYear", "CrPriceCssdownload", "CdnFree", "CrBuyOnMakersite", "CrUrlOnMakersite", "ServiceFeeOfOnlineMonth", "ServiceFeeOfOnlineYear", "ServiceFeeOfAttorneyMonth", "ServiceFeeOfAttorneyYear" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.GetUseRateRequest), global::Webfontsdk.GetUseRateRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.UseRate), global::Webfontsdk.UseRate.Parser, new[]{ "FontId", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.GetUseRateResult), global::Webfontsdk.GetUseRateResult.Parser, new[]{ "Items" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.GetAccessKeyInfoRequest), global::Webfontsdk.GetAccessKeyInfoRequest.Parser, new[]{ "Accesskey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.CheckAccessKeyRequest), global::Webfontsdk.CheckAccessKeyRequest.Parser, new[]{ "UserUid", "FontId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.MakesureAccessKeyRequest), global::Webfontsdk.MakesureAccessKeyRequest.Parser, new[]{ "UserUid", "FontId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Webfontsdk.AccessKeyInfo), global::Webfontsdk.AccessKeyInfo.Parser, new[]{ "Accesskey", "UserUid", "FontId", "AddTime", "Uuid" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Language {
    [pbr::OriginalName("UNKNOW")] Unknow = 0,
    [pbr::OriginalName("English")] English = 1,
    [pbr::OriginalName("Simplified_Chinese")] SimplifiedChinese = 2,
    [pbr::OriginalName("Traditional_Chinese")] TraditionalChinese = 3,
    [pbr::OriginalName("Japanese")] Japanese = 4,
    [pbr::OriginalName("Korean")] Korean = 5,
  }

  #endregion

  #region Messages
  public sealed partial class FontListRequest : pb::IMessage<FontListRequest> {
    private static readonly pb::MessageParser<FontListRequest> _parser = new pb::MessageParser<FontListRequest>(() => new FontListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FontListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontListRequest(FontListRequest other) : this() {
      apikey_ = other.apikey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontListRequest Clone() {
      return new FontListRequest(this);
    }

    /// <summary>Field number for the "apikey" field.</summary>
    public const int ApikeyFieldNumber = 1;
    private string apikey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Apikey {
      get { return apikey_; }
      set {
        apikey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FontListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FontListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Apikey != other.Apikey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Apikey.Length != 0) hash ^= Apikey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Apikey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Apikey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Apikey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Apikey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FontListRequest other) {
      if (other == null) {
        return;
      }
      if (other.Apikey.Length != 0) {
        Apikey = other.Apikey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Apikey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FontListResult : pb::IMessage<FontListResult> {
    private static readonly pb::MessageParser<FontListResult> _parser = new pb::MessageParser<FontListResult>(() => new FontListResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FontListResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontListResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontListResult(FontListResult other) : this() {
      fonts_ = other.fonts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontListResult Clone() {
      return new FontListResult(this);
    }

    /// <summary>Field number for the "fonts" field.</summary>
    public const int FontsFieldNumber = 1;
    private static readonly pbc::MapField<uint, long>.Codec _map_fonts_codec
        = new pbc::MapField<uint, long>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<uint, long> fonts_ = new pbc::MapField<uint, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, long> Fonts {
      get { return fonts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FontListResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FontListResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Fonts.Equals(other.Fonts)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Fonts.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fonts_.WriteTo(output, _map_fonts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fonts_.CalculateSize(_map_fonts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FontListResult other) {
      if (other == null) {
        return;
      }
      fonts_.Add(other.fonts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fonts_.AddEntriesFrom(input, _map_fonts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FontBuildAccessKeyRequest : pb::IMessage<FontBuildAccessKeyRequest> {
    private static readonly pb::MessageParser<FontBuildAccessKeyRequest> _parser = new pb::MessageParser<FontBuildAccessKeyRequest>(() => new FontBuildAccessKeyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FontBuildAccessKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontBuildAccessKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontBuildAccessKeyRequest(FontBuildAccessKeyRequest other) : this() {
      apikey_ = other.apikey_;
      accesskey_ = other.accesskey_;
      text_ = other.text_;
      needTtf_ = other.needTtf_;
      needEot_ = other.needEot_;
      needWoff_ = other.needWoff_;
      needWoff2_ = other.needWoff2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontBuildAccessKeyRequest Clone() {
      return new FontBuildAccessKeyRequest(this);
    }

    /// <summary>Field number for the "apikey" field.</summary>
    public const int ApikeyFieldNumber = 1;
    private string apikey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Apikey {
      get { return apikey_; }
      set {
        apikey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accesskey" field.</summary>
    public const int AccesskeyFieldNumber = 2;
    private string accesskey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Accesskey {
      get { return accesskey_; }
      set {
        accesskey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "need_ttf" field.</summary>
    public const int NeedTtfFieldNumber = 4;
    private bool needTtf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedTtf {
      get { return needTtf_; }
      set {
        needTtf_ = value;
      }
    }

    /// <summary>Field number for the "need_eot" field.</summary>
    public const int NeedEotFieldNumber = 5;
    private bool needEot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedEot {
      get { return needEot_; }
      set {
        needEot_ = value;
      }
    }

    /// <summary>Field number for the "need_woff" field.</summary>
    public const int NeedWoffFieldNumber = 6;
    private bool needWoff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedWoff {
      get { return needWoff_; }
      set {
        needWoff_ = value;
      }
    }

    /// <summary>Field number for the "need_woff2" field.</summary>
    public const int NeedWoff2FieldNumber = 7;
    private bool needWoff2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedWoff2 {
      get { return needWoff2_; }
      set {
        needWoff2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FontBuildAccessKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FontBuildAccessKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Apikey != other.Apikey) return false;
      if (Accesskey != other.Accesskey) return false;
      if (Text != other.Text) return false;
      if (NeedTtf != other.NeedTtf) return false;
      if (NeedEot != other.NeedEot) return false;
      if (NeedWoff != other.NeedWoff) return false;
      if (NeedWoff2 != other.NeedWoff2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Apikey.Length != 0) hash ^= Apikey.GetHashCode();
      if (Accesskey.Length != 0) hash ^= Accesskey.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (NeedTtf != false) hash ^= NeedTtf.GetHashCode();
      if (NeedEot != false) hash ^= NeedEot.GetHashCode();
      if (NeedWoff != false) hash ^= NeedWoff.GetHashCode();
      if (NeedWoff2 != false) hash ^= NeedWoff2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Apikey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Apikey);
      }
      if (Accesskey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Accesskey);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (NeedTtf != false) {
        output.WriteRawTag(32);
        output.WriteBool(NeedTtf);
      }
      if (NeedEot != false) {
        output.WriteRawTag(40);
        output.WriteBool(NeedEot);
      }
      if (NeedWoff != false) {
        output.WriteRawTag(48);
        output.WriteBool(NeedWoff);
      }
      if (NeedWoff2 != false) {
        output.WriteRawTag(56);
        output.WriteBool(NeedWoff2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Apikey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Apikey);
      }
      if (Accesskey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Accesskey);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (NeedTtf != false) {
        size += 1 + 1;
      }
      if (NeedEot != false) {
        size += 1 + 1;
      }
      if (NeedWoff != false) {
        size += 1 + 1;
      }
      if (NeedWoff2 != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FontBuildAccessKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.Apikey.Length != 0) {
        Apikey = other.Apikey;
      }
      if (other.Accesskey.Length != 0) {
        Accesskey = other.Accesskey;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.NeedTtf != false) {
        NeedTtf = other.NeedTtf;
      }
      if (other.NeedEot != false) {
        NeedEot = other.NeedEot;
      }
      if (other.NeedWoff != false) {
        NeedWoff = other.NeedWoff;
      }
      if (other.NeedWoff2 != false) {
        NeedWoff2 = other.NeedWoff2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Apikey = input.ReadString();
            break;
          }
          case 18: {
            Accesskey = input.ReadString();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
          case 32: {
            NeedTtf = input.ReadBool();
            break;
          }
          case 40: {
            NeedEot = input.ReadBool();
            break;
          }
          case 48: {
            NeedWoff = input.ReadBool();
            break;
          }
          case 56: {
            NeedWoff2 = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FontBuildRequest : pb::IMessage<FontBuildRequest> {
    private static readonly pb::MessageParser<FontBuildRequest> _parser = new pb::MessageParser<FontBuildRequest>(() => new FontBuildRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FontBuildRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontBuildRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontBuildRequest(FontBuildRequest other) : this() {
      apikey_ = other.apikey_;
      fontId_ = other.fontId_;
      text_ = other.text_;
      needTtf_ = other.needTtf_;
      needEot_ = other.needEot_;
      needWoff_ = other.needWoff_;
      needWoff2_ = other.needWoff2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontBuildRequest Clone() {
      return new FontBuildRequest(this);
    }

    /// <summary>Field number for the "apikey" field.</summary>
    public const int ApikeyFieldNumber = 1;
    private string apikey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Apikey {
      get { return apikey_; }
      set {
        apikey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "font_id" field.</summary>
    public const int FontIdFieldNumber = 2;
    private uint fontId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FontId {
      get { return fontId_; }
      set {
        fontId_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "need_ttf" field.</summary>
    public const int NeedTtfFieldNumber = 4;
    private bool needTtf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedTtf {
      get { return needTtf_; }
      set {
        needTtf_ = value;
      }
    }

    /// <summary>Field number for the "need_eot" field.</summary>
    public const int NeedEotFieldNumber = 5;
    private bool needEot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedEot {
      get { return needEot_; }
      set {
        needEot_ = value;
      }
    }

    /// <summary>Field number for the "need_woff" field.</summary>
    public const int NeedWoffFieldNumber = 6;
    private bool needWoff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedWoff {
      get { return needWoff_; }
      set {
        needWoff_ = value;
      }
    }

    /// <summary>Field number for the "need_woff2" field.</summary>
    public const int NeedWoff2FieldNumber = 7;
    private bool needWoff2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedWoff2 {
      get { return needWoff2_; }
      set {
        needWoff2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FontBuildRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FontBuildRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Apikey != other.Apikey) return false;
      if (FontId != other.FontId) return false;
      if (Text != other.Text) return false;
      if (NeedTtf != other.NeedTtf) return false;
      if (NeedEot != other.NeedEot) return false;
      if (NeedWoff != other.NeedWoff) return false;
      if (NeedWoff2 != other.NeedWoff2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Apikey.Length != 0) hash ^= Apikey.GetHashCode();
      if (FontId != 0) hash ^= FontId.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (NeedTtf != false) hash ^= NeedTtf.GetHashCode();
      if (NeedEot != false) hash ^= NeedEot.GetHashCode();
      if (NeedWoff != false) hash ^= NeedWoff.GetHashCode();
      if (NeedWoff2 != false) hash ^= NeedWoff2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Apikey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Apikey);
      }
      if (FontId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FontId);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (NeedTtf != false) {
        output.WriteRawTag(32);
        output.WriteBool(NeedTtf);
      }
      if (NeedEot != false) {
        output.WriteRawTag(40);
        output.WriteBool(NeedEot);
      }
      if (NeedWoff != false) {
        output.WriteRawTag(48);
        output.WriteBool(NeedWoff);
      }
      if (NeedWoff2 != false) {
        output.WriteRawTag(56);
        output.WriteBool(NeedWoff2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Apikey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Apikey);
      }
      if (FontId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FontId);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (NeedTtf != false) {
        size += 1 + 1;
      }
      if (NeedEot != false) {
        size += 1 + 1;
      }
      if (NeedWoff != false) {
        size += 1 + 1;
      }
      if (NeedWoff2 != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FontBuildRequest other) {
      if (other == null) {
        return;
      }
      if (other.Apikey.Length != 0) {
        Apikey = other.Apikey;
      }
      if (other.FontId != 0) {
        FontId = other.FontId;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.NeedTtf != false) {
        NeedTtf = other.NeedTtf;
      }
      if (other.NeedEot != false) {
        NeedEot = other.NeedEot;
      }
      if (other.NeedWoff != false) {
        NeedWoff = other.NeedWoff;
      }
      if (other.NeedWoff2 != false) {
        NeedWoff2 = other.NeedWoff2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Apikey = input.ReadString();
            break;
          }
          case 16: {
            FontId = input.ReadUInt32();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
          case 32: {
            NeedTtf = input.ReadBool();
            break;
          }
          case 40: {
            NeedEot = input.ReadBool();
            break;
          }
          case 48: {
            NeedWoff = input.ReadBool();
            break;
          }
          case 56: {
            NeedWoff2 = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultFontBuildRequest : pb::IMessage<MultFontBuildRequest> {
    private static readonly pb::MessageParser<MultFontBuildRequest> _parser = new pb::MessageParser<MultFontBuildRequest>(() => new MultFontBuildRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultFontBuildRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultFontBuildRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultFontBuildRequest(MultFontBuildRequest other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultFontBuildRequest Clone() {
      return new MultFontBuildRequest(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Webfontsdk.FontBuildRequest> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Webfontsdk.FontBuildRequest.Parser);
    private readonly pbc::RepeatedField<global::Webfontsdk.FontBuildRequest> items_ = new pbc::RepeatedField<global::Webfontsdk.FontBuildRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Webfontsdk.FontBuildRequest> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultFontBuildRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultFontBuildRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultFontBuildRequest other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FontBuildBufResult : pb::IMessage<FontBuildBufResult> {
    private static readonly pb::MessageParser<FontBuildBufResult> _parser = new pb::MessageParser<FontBuildBufResult>(() => new FontBuildBufResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FontBuildBufResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontBuildBufResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontBuildBufResult(FontBuildBufResult other) : this() {
      fontId_ = other.fontId_;
      fontFormatVersion_ = other.fontFormatVersion_;
      fontChecksum_ = other.fontChecksum_;
      nameEn_ = other.nameEn_;
      bytesTtf_ = other.bytesTtf_;
      bytesEot_ = other.bytesEot_;
      bytesWoff_ = other.bytesWoff_;
      bytesWoff2_ = other.bytesWoff2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontBuildBufResult Clone() {
      return new FontBuildBufResult(this);
    }

    /// <summary>Field number for the "font_id" field.</summary>
    public const int FontIdFieldNumber = 1;
    private uint fontId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FontId {
      get { return fontId_; }
      set {
        fontId_ = value;
      }
    }

    /// <summary>Field number for the "font_format_version" field.</summary>
    public const int FontFormatVersionFieldNumber = 2;
    private uint fontFormatVersion_;
    /// <summary>
    ///字体格式版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FontFormatVersion {
      get { return fontFormatVersion_; }
      set {
        fontFormatVersion_ = value;
      }
    }

    /// <summary>Field number for the "font_checksum" field.</summary>
    public const int FontChecksumFieldNumber = 3;
    private ulong fontChecksum_;
    /// <summary>
    ///字体的唯一辨识编码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FontChecksum {
      get { return fontChecksum_; }
      set {
        fontChecksum_ = value;
      }
    }

    /// <summary>Field number for the "name_en" field.</summary>
    public const int NameEnFieldNumber = 4;
    private string nameEn_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameEn {
      get { return nameEn_; }
      set {
        nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytes_ttf" field.</summary>
    public const int BytesTtfFieldNumber = 5;
    private pb::ByteString bytesTtf_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesTtf {
      get { return bytesTtf_; }
      set {
        bytesTtf_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytes_eot" field.</summary>
    public const int BytesEotFieldNumber = 6;
    private pb::ByteString bytesEot_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesEot {
      get { return bytesEot_; }
      set {
        bytesEot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytes_woff" field.</summary>
    public const int BytesWoffFieldNumber = 7;
    private pb::ByteString bytesWoff_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesWoff {
      get { return bytesWoff_; }
      set {
        bytesWoff_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytes_woff2" field.</summary>
    public const int BytesWoff2FieldNumber = 8;
    private pb::ByteString bytesWoff2_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesWoff2 {
      get { return bytesWoff2_; }
      set {
        bytesWoff2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FontBuildBufResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FontBuildBufResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FontId != other.FontId) return false;
      if (FontFormatVersion != other.FontFormatVersion) return false;
      if (FontChecksum != other.FontChecksum) return false;
      if (NameEn != other.NameEn) return false;
      if (BytesTtf != other.BytesTtf) return false;
      if (BytesEot != other.BytesEot) return false;
      if (BytesWoff != other.BytesWoff) return false;
      if (BytesWoff2 != other.BytesWoff2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FontId != 0) hash ^= FontId.GetHashCode();
      if (FontFormatVersion != 0) hash ^= FontFormatVersion.GetHashCode();
      if (FontChecksum != 0UL) hash ^= FontChecksum.GetHashCode();
      if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
      if (BytesTtf.Length != 0) hash ^= BytesTtf.GetHashCode();
      if (BytesEot.Length != 0) hash ^= BytesEot.GetHashCode();
      if (BytesWoff.Length != 0) hash ^= BytesWoff.GetHashCode();
      if (BytesWoff2.Length != 0) hash ^= BytesWoff2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FontId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FontId);
      }
      if (FontFormatVersion != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FontFormatVersion);
      }
      if (FontChecksum != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FontChecksum);
      }
      if (NameEn.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NameEn);
      }
      if (BytesTtf.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(BytesTtf);
      }
      if (BytesEot.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(BytesEot);
      }
      if (BytesWoff.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(BytesWoff);
      }
      if (BytesWoff2.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(BytesWoff2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FontId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FontId);
      }
      if (FontFormatVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FontFormatVersion);
      }
      if (FontChecksum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FontChecksum);
      }
      if (NameEn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
      }
      if (BytesTtf.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesTtf);
      }
      if (BytesEot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesEot);
      }
      if (BytesWoff.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesWoff);
      }
      if (BytesWoff2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesWoff2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FontBuildBufResult other) {
      if (other == null) {
        return;
      }
      if (other.FontId != 0) {
        FontId = other.FontId;
      }
      if (other.FontFormatVersion != 0) {
        FontFormatVersion = other.FontFormatVersion;
      }
      if (other.FontChecksum != 0UL) {
        FontChecksum = other.FontChecksum;
      }
      if (other.NameEn.Length != 0) {
        NameEn = other.NameEn;
      }
      if (other.BytesTtf.Length != 0) {
        BytesTtf = other.BytesTtf;
      }
      if (other.BytesEot.Length != 0) {
        BytesEot = other.BytesEot;
      }
      if (other.BytesWoff.Length != 0) {
        BytesWoff = other.BytesWoff;
      }
      if (other.BytesWoff2.Length != 0) {
        BytesWoff2 = other.BytesWoff2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FontId = input.ReadUInt32();
            break;
          }
          case 16: {
            FontFormatVersion = input.ReadUInt32();
            break;
          }
          case 24: {
            FontChecksum = input.ReadUInt64();
            break;
          }
          case 34: {
            NameEn = input.ReadString();
            break;
          }
          case 42: {
            BytesTtf = input.ReadBytes();
            break;
          }
          case 50: {
            BytesEot = input.ReadBytes();
            break;
          }
          case 58: {
            BytesWoff = input.ReadBytes();
            break;
          }
          case 66: {
            BytesWoff2 = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultFontBuildBufResult : pb::IMessage<MultFontBuildBufResult> {
    private static readonly pb::MessageParser<MultFontBuildBufResult> _parser = new pb::MessageParser<MultFontBuildBufResult>(() => new MultFontBuildBufResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultFontBuildBufResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultFontBuildBufResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultFontBuildBufResult(MultFontBuildBufResult other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultFontBuildBufResult Clone() {
      return new MultFontBuildBufResult(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Webfontsdk.FontBuildBufResult> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Webfontsdk.FontBuildBufResult.Parser);
    private readonly pbc::RepeatedField<global::Webfontsdk.FontBuildBufResult> items_ = new pbc::RepeatedField<global::Webfontsdk.FontBuildBufResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Webfontsdk.FontBuildBufResult> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultFontBuildBufResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultFontBuildBufResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultFontBuildBufResult other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///GetProfile for html5
  /// </summary>
  public sealed partial class GetProfileWithoutMapRequest : pb::IMessage<GetProfileWithoutMapRequest> {
    private static readonly pb::MessageParser<GetProfileWithoutMapRequest> _parser = new pb::MessageParser<GetProfileWithoutMapRequest>(() => new GetProfileWithoutMapRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProfileWithoutMapRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileWithoutMapRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileWithoutMapRequest(GetProfileWithoutMapRequest other) : this() {
      apikey_ = other.apikey_;
      fontId_ = other.fontId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileWithoutMapRequest Clone() {
      return new GetProfileWithoutMapRequest(this);
    }

    /// <summary>Field number for the "apikey" field.</summary>
    public const int ApikeyFieldNumber = 1;
    private string apikey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Apikey {
      get { return apikey_; }
      set {
        apikey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "font_id" field.</summary>
    public const int FontIdFieldNumber = 2;
    private uint fontId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FontId {
      get { return fontId_; }
      set {
        fontId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProfileWithoutMapRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProfileWithoutMapRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Apikey != other.Apikey) return false;
      if (FontId != other.FontId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Apikey.Length != 0) hash ^= Apikey.GetHashCode();
      if (FontId != 0) hash ^= FontId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Apikey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Apikey);
      }
      if (FontId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FontId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Apikey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Apikey);
      }
      if (FontId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FontId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProfileWithoutMapRequest other) {
      if (other == null) {
        return;
      }
      if (other.Apikey.Length != 0) {
        Apikey = other.Apikey;
      }
      if (other.FontId != 0) {
        FontId = other.FontId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Apikey = input.ReadString();
            break;
          }
          case 16: {
            FontId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetProfileWithoutMapResult : pb::IMessage<GetProfileWithoutMapResult> {
    private static readonly pb::MessageParser<GetProfileWithoutMapResult> _parser = new pb::MessageParser<GetProfileWithoutMapResult>(() => new GetProfileWithoutMapResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProfileWithoutMapResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileWithoutMapResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileWithoutMapResult(GetProfileWithoutMapResult other) : this() {
      fontId_ = other.fontId_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfileWithoutMapResult Clone() {
      return new GetProfileWithoutMapResult(this);
    }

    /// <summary>Field number for the "font_id" field.</summary>
    public const int FontIdFieldNumber = 1;
    private uint fontId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FontId {
      get { return fontId_; }
      set {
        fontId_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProfileWithoutMapResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProfileWithoutMapResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FontId != other.FontId) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FontId != 0) hash ^= FontId.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FontId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FontId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FontId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FontId);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProfileWithoutMapResult other) {
      if (other == null) {
        return;
      }
      if (other.FontId != 0) {
        FontId = other.FontId;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FontId = input.ReadUInt32();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMultGlyfsUnicodeRequest : pb::IMessage<GetMultGlyfsUnicodeRequest> {
    private static readonly pb::MessageParser<GetMultGlyfsUnicodeRequest> _parser = new pb::MessageParser<GetMultGlyfsUnicodeRequest>(() => new GetMultGlyfsUnicodeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMultGlyfsUnicodeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMultGlyfsUnicodeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMultGlyfsUnicodeRequest(GetMultGlyfsUnicodeRequest other) : this() {
      apikey_ = other.apikey_;
      fontId_ = other.fontId_;
      fontChecksum_ = other.fontChecksum_;
      unicodes_ = other.unicodes_.Clone();
      appendZero_ = other.appendZero_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMultGlyfsUnicodeRequest Clone() {
      return new GetMultGlyfsUnicodeRequest(this);
    }

    /// <summary>Field number for the "apikey" field.</summary>
    public const int ApikeyFieldNumber = 1;
    private string apikey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Apikey {
      get { return apikey_; }
      set {
        apikey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "font_id" field.</summary>
    public const int FontIdFieldNumber = 2;
    private uint fontId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FontId {
      get { return fontId_; }
      set {
        fontId_ = value;
      }
    }

    /// <summary>Field number for the "font_checksum" field.</summary>
    public const int FontChecksumFieldNumber = 3;
    private uint fontChecksum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FontChecksum {
      get { return fontChecksum_; }
      set {
        fontChecksum_ = value;
      }
    }

    /// <summary>Field number for the "unicodes" field.</summary>
    public const int UnicodesFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_unicodes_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> unicodes_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Unicodes {
      get { return unicodes_; }
    }

    /// <summary>Field number for the "append_zero" field.</summary>
    public const int AppendZeroFieldNumber = 5;
    private bool appendZero_;
    /// <summary>
    ///追加0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AppendZero {
      get { return appendZero_; }
      set {
        appendZero_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMultGlyfsUnicodeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMultGlyfsUnicodeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Apikey != other.Apikey) return false;
      if (FontId != other.FontId) return false;
      if (FontChecksum != other.FontChecksum) return false;
      if(!unicodes_.Equals(other.unicodes_)) return false;
      if (AppendZero != other.AppendZero) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Apikey.Length != 0) hash ^= Apikey.GetHashCode();
      if (FontId != 0) hash ^= FontId.GetHashCode();
      if (FontChecksum != 0) hash ^= FontChecksum.GetHashCode();
      hash ^= unicodes_.GetHashCode();
      if (AppendZero != false) hash ^= AppendZero.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Apikey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Apikey);
      }
      if (FontId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FontId);
      }
      if (FontChecksum != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FontChecksum);
      }
      unicodes_.WriteTo(output, _repeated_unicodes_codec);
      if (AppendZero != false) {
        output.WriteRawTag(40);
        output.WriteBool(AppendZero);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Apikey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Apikey);
      }
      if (FontId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FontId);
      }
      if (FontChecksum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FontChecksum);
      }
      size += unicodes_.CalculateSize(_repeated_unicodes_codec);
      if (AppendZero != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMultGlyfsUnicodeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Apikey.Length != 0) {
        Apikey = other.Apikey;
      }
      if (other.FontId != 0) {
        FontId = other.FontId;
      }
      if (other.FontChecksum != 0) {
        FontChecksum = other.FontChecksum;
      }
      unicodes_.Add(other.unicodes_);
      if (other.AppendZero != false) {
        AppendZero = other.AppendZero;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Apikey = input.ReadString();
            break;
          }
          case 16: {
            FontId = input.ReadUInt32();
            break;
          }
          case 24: {
            FontChecksum = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            unicodes_.AddEntriesFrom(input, _repeated_unicodes_codec);
            break;
          }
          case 40: {
            AppendZero = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class indexs : pb::IMessage<indexs> {
    private static readonly pb::MessageParser<indexs> _parser = new pb::MessageParser<indexs>(() => new indexs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<indexs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public indexs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public indexs(indexs other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public indexs Clone() {
      return new indexs(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_items_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> items_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as indexs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(indexs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(indexs other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18:
          case 16: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMultGlyfsUnicodeResult : pb::IMessage<GetMultGlyfsUnicodeResult> {
    private static readonly pb::MessageParser<GetMultGlyfsUnicodeResult> _parser = new pb::MessageParser<GetMultGlyfsUnicodeResult>(() => new GetMultGlyfsUnicodeResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMultGlyfsUnicodeResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMultGlyfsUnicodeResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMultGlyfsUnicodeResult(GetMultGlyfsUnicodeResult other) : this() {
      unicodes_ = other.unicodes_.Clone();
      indexs_ = other.indexs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMultGlyfsUnicodeResult Clone() {
      return new GetMultGlyfsUnicodeResult(this);
    }

    /// <summary>Field number for the "unicodes" field.</summary>
    public const int UnicodesFieldNumber = 1;
    private static readonly pbc::MapField<uint, global::Webfontsdk.indexs>.Codec _map_unicodes_codec
        = new pbc::MapField<uint, global::Webfontsdk.indexs>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Webfontsdk.indexs.Parser), 10);
    private readonly pbc::MapField<uint, global::Webfontsdk.indexs> unicodes_ = new pbc::MapField<uint, global::Webfontsdk.indexs>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Webfontsdk.indexs> Unicodes {
      get { return unicodes_; }
    }

    /// <summary>Field number for the "indexs" field.</summary>
    public const int IndexsFieldNumber = 3;
    private static readonly pbc::MapField<uint, pb::ByteString>.Codec _map_indexs_codec
        = new pbc::MapField<uint, pb::ByteString>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForBytes(18, pb::ByteString.Empty), 26);
    private readonly pbc::MapField<uint, pb::ByteString> indexs_ = new pbc::MapField<uint, pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, pb::ByteString> Indexs {
      get { return indexs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMultGlyfsUnicodeResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMultGlyfsUnicodeResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Unicodes.Equals(other.Unicodes)) return false;
      if (!Indexs.Equals(other.Indexs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Unicodes.GetHashCode();
      hash ^= Indexs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      unicodes_.WriteTo(output, _map_unicodes_codec);
      indexs_.WriteTo(output, _map_indexs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += unicodes_.CalculateSize(_map_unicodes_codec);
      size += indexs_.CalculateSize(_map_indexs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMultGlyfsUnicodeResult other) {
      if (other == null) {
        return;
      }
      unicodes_.Add(other.unicodes_);
      indexs_.Add(other.indexs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            unicodes_.AddEntriesFrom(input, _map_unicodes_codec);
            break;
          }
          case 26: {
            indexs_.AddEntriesFrom(input, _map_indexs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获得厂商列表
  /// </summary>
  public sealed partial class GetFontMakerListRequest : pb::IMessage<GetFontMakerListRequest> {
    private static readonly pb::MessageParser<GetFontMakerListRequest> _parser = new pb::MessageParser<GetFontMakerListRequest>(() => new GetFontMakerListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFontMakerListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFontMakerListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFontMakerListRequest(GetFontMakerListRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFontMakerListRequest Clone() {
      return new GetFontMakerListRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFontMakerListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFontMakerListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFontMakerListRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///厂商列表
  /// </summary>
  public sealed partial class GetFontMakerListReply : pb::IMessage<GetFontMakerListReply> {
    private static readonly pb::MessageParser<GetFontMakerListReply> _parser = new pb::MessageParser<GetFontMakerListReply>(() => new GetFontMakerListReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFontMakerListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFontMakerListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFontMakerListReply(GetFontMakerListReply other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFontMakerListReply Clone() {
      return new GetFontMakerListReply(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Webfontsdk.FontMaker> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Webfontsdk.FontMaker.Parser);
    private readonly pbc::RepeatedField<global::Webfontsdk.FontMaker> items_ = new pbc::RepeatedField<global::Webfontsdk.FontMaker>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Webfontsdk.FontMaker> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFontMakerListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFontMakerListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFontMakerListReply other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetFontListRequest : pb::IMessage<GetFontListRequest> {
    private static readonly pb::MessageParser<GetFontListRequest> _parser = new pb::MessageParser<GetFontListRequest>(() => new GetFontListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFontListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFontListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFontListRequest(GetFontListRequest other) : this() {
      makerId_ = other.makerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFontListRequest Clone() {
      return new GetFontListRequest(this);
    }

    /// <summary>Field number for the "maker_id" field.</summary>
    public const int MakerIdFieldNumber = 1;
    private uint makerId_;
    /// <summary>
    ///通过厂商来搜索   ，0则忽略此项
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MakerId {
      get { return makerId_; }
      set {
        makerId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFontListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFontListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MakerId != other.MakerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MakerId != 0) hash ^= MakerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MakerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MakerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MakerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MakerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFontListRequest other) {
      if (other == null) {
        return;
      }
      if (other.MakerId != 0) {
        MakerId = other.MakerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MakerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetFontListReply : pb::IMessage<GetFontListReply> {
    private static readonly pb::MessageParser<GetFontListReply> _parser = new pb::MessageParser<GetFontListReply>(() => new GetFontListReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetFontListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFontListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFontListReply(GetFontListReply other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetFontListReply Clone() {
      return new GetFontListReply(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Webfontsdk.FontMetaInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(18, global::Webfontsdk.FontMetaInfo.Parser);
    private readonly pbc::RepeatedField<global::Webfontsdk.FontMetaInfo> items_ = new pbc::RepeatedField<global::Webfontsdk.FontMetaInfo>();
    /// <summary>
    ///字体列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Webfontsdk.FontMetaInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetFontListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetFontListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetFontListReply other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///字体厂商
  /// </summary>
  public sealed partial class FontMaker : pb::IMessage<FontMaker> {
    private static readonly pb::MessageParser<FontMaker> _parser = new pb::MessageParser<FontMaker>(() => new FontMaker());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FontMaker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontMaker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontMaker(FontMaker other) : this() {
      makerId_ = other.makerId_;
      url_ = other.url_;
      nameEn_ = other.nameEn_;
      nameCn_ = other.nameCn_;
      nameTw_ = other.nameTw_;
      nameJp_ = other.nameJp_;
      nameKr_ = other.nameKr_;
      introEn_ = other.introEn_;
      introCn_ = other.introCn_;
      introTw_ = other.introTw_;
      introJp_ = other.introJp_;
      introKr_ = other.introKr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontMaker Clone() {
      return new FontMaker(this);
    }

    /// <summary>Field number for the "maker_id" field.</summary>
    public const int MakerIdFieldNumber = 1;
    private uint makerId_;
    /// <summary>
    ///厂商编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MakerId {
      get { return makerId_; }
      set {
        makerId_ = value;
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 2;
    private string url_ = "";
    /// <summary>
    ///厂商网址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_en" field.</summary>
    public const int NameEnFieldNumber = 3;
    private string nameEn_ = "";
    /// <summary>
    ///字体英文名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameEn {
      get { return nameEn_; }
      set {
        nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_cn" field.</summary>
    public const int NameCnFieldNumber = 4;
    private string nameCn_ = "";
    /// <summary>
    ///字体中文名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameCn {
      get { return nameCn_; }
      set {
        nameCn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_tw" field.</summary>
    public const int NameTwFieldNumber = 5;
    private string nameTw_ = "";
    /// <summary>
    ///字体繁体名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameTw {
      get { return nameTw_; }
      set {
        nameTw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_jp" field.</summary>
    public const int NameJpFieldNumber = 6;
    private string nameJp_ = "";
    /// <summary>
    ///字体日文名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameJp {
      get { return nameJp_; }
      set {
        nameJp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_kr" field.</summary>
    public const int NameKrFieldNumber = 7;
    private string nameKr_ = "";
    /// <summary>
    ///字体韩语名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameKr {
      get { return nameKr_; }
      set {
        nameKr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intro_en" field.</summary>
    public const int IntroEnFieldNumber = 8;
    private string introEn_ = "";
    /// <summary>
    ///英语厂商介绍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IntroEn {
      get { return introEn_; }
      set {
        introEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intro_cn" field.</summary>
    public const int IntroCnFieldNumber = 9;
    private string introCn_ = "";
    /// <summary>
    ///中文介绍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IntroCn {
      get { return introCn_; }
      set {
        introCn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intro_tw" field.</summary>
    public const int IntroTwFieldNumber = 10;
    private string introTw_ = "";
    /// <summary>
    ///繁体中文介绍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IntroTw {
      get { return introTw_; }
      set {
        introTw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intro_jp" field.</summary>
    public const int IntroJpFieldNumber = 11;
    private string introJp_ = "";
    /// <summary>
    ///日语介绍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IntroJp {
      get { return introJp_; }
      set {
        introJp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intro_kr" field.</summary>
    public const int IntroKrFieldNumber = 12;
    private string introKr_ = "";
    /// <summary>
    ///韩语介绍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IntroKr {
      get { return introKr_; }
      set {
        introKr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FontMaker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FontMaker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MakerId != other.MakerId) return false;
      if (Url != other.Url) return false;
      if (NameEn != other.NameEn) return false;
      if (NameCn != other.NameCn) return false;
      if (NameTw != other.NameTw) return false;
      if (NameJp != other.NameJp) return false;
      if (NameKr != other.NameKr) return false;
      if (IntroEn != other.IntroEn) return false;
      if (IntroCn != other.IntroCn) return false;
      if (IntroTw != other.IntroTw) return false;
      if (IntroJp != other.IntroJp) return false;
      if (IntroKr != other.IntroKr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MakerId != 0) hash ^= MakerId.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
      if (NameCn.Length != 0) hash ^= NameCn.GetHashCode();
      if (NameTw.Length != 0) hash ^= NameTw.GetHashCode();
      if (NameJp.Length != 0) hash ^= NameJp.GetHashCode();
      if (NameKr.Length != 0) hash ^= NameKr.GetHashCode();
      if (IntroEn.Length != 0) hash ^= IntroEn.GetHashCode();
      if (IntroCn.Length != 0) hash ^= IntroCn.GetHashCode();
      if (IntroTw.Length != 0) hash ^= IntroTw.GetHashCode();
      if (IntroJp.Length != 0) hash ^= IntroJp.GetHashCode();
      if (IntroKr.Length != 0) hash ^= IntroKr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MakerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MakerId);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Url);
      }
      if (NameEn.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NameEn);
      }
      if (NameCn.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NameCn);
      }
      if (NameTw.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NameTw);
      }
      if (NameJp.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(NameJp);
      }
      if (NameKr.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(NameKr);
      }
      if (IntroEn.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(IntroEn);
      }
      if (IntroCn.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(IntroCn);
      }
      if (IntroTw.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(IntroTw);
      }
      if (IntroJp.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(IntroJp);
      }
      if (IntroKr.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(IntroKr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MakerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MakerId);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (NameEn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
      }
      if (NameCn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameCn);
      }
      if (NameTw.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameTw);
      }
      if (NameJp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameJp);
      }
      if (NameKr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameKr);
      }
      if (IntroEn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IntroEn);
      }
      if (IntroCn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IntroCn);
      }
      if (IntroTw.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IntroTw);
      }
      if (IntroJp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IntroJp);
      }
      if (IntroKr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IntroKr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FontMaker other) {
      if (other == null) {
        return;
      }
      if (other.MakerId != 0) {
        MakerId = other.MakerId;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.NameEn.Length != 0) {
        NameEn = other.NameEn;
      }
      if (other.NameCn.Length != 0) {
        NameCn = other.NameCn;
      }
      if (other.NameTw.Length != 0) {
        NameTw = other.NameTw;
      }
      if (other.NameJp.Length != 0) {
        NameJp = other.NameJp;
      }
      if (other.NameKr.Length != 0) {
        NameKr = other.NameKr;
      }
      if (other.IntroEn.Length != 0) {
        IntroEn = other.IntroEn;
      }
      if (other.IntroCn.Length != 0) {
        IntroCn = other.IntroCn;
      }
      if (other.IntroTw.Length != 0) {
        IntroTw = other.IntroTw;
      }
      if (other.IntroJp.Length != 0) {
        IntroJp = other.IntroJp;
      }
      if (other.IntroKr.Length != 0) {
        IntroKr = other.IntroKr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MakerId = input.ReadUInt32();
            break;
          }
          case 18: {
            Url = input.ReadString();
            break;
          }
          case 26: {
            NameEn = input.ReadString();
            break;
          }
          case 34: {
            NameCn = input.ReadString();
            break;
          }
          case 42: {
            NameTw = input.ReadString();
            break;
          }
          case 50: {
            NameJp = input.ReadString();
            break;
          }
          case 58: {
            NameKr = input.ReadString();
            break;
          }
          case 66: {
            IntroEn = input.ReadString();
            break;
          }
          case 74: {
            IntroCn = input.ReadString();
            break;
          }
          case 82: {
            IntroTw = input.ReadString();
            break;
          }
          case 90: {
            IntroJp = input.ReadString();
            break;
          }
          case 98: {
            IntroKr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///字体信息
  /// </summary>
  public sealed partial class FontMetaInfo : pb::IMessage<FontMetaInfo> {
    private static readonly pb::MessageParser<FontMetaInfo> _parser = new pb::MessageParser<FontMetaInfo>(() => new FontMetaInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FontMetaInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontMetaInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontMetaInfo(FontMetaInfo other) : this() {
      fontId_ = other.fontId_;
      makerId_ = other.makerId_;
      nameEn_ = other.nameEn_;
      nameCn_ = other.nameCn_;
      nameTw_ = other.nameTw_;
      nameJp_ = other.nameJp_;
      nameKr_ = other.nameKr_;
      introEn_ = other.introEn_;
      introCn_ = other.introCn_;
      introTw_ = other.introTw_;
      introJp_ = other.introJp_;
      introKr_ = other.introKr_;
      lang_ = other.lang_.Clone();
      crPriceMonth_ = other.crPriceMonth_;
      crPriceYear_ = other.crPriceYear_;
      crPriceCssdownload_ = other.crPriceCssdownload_;
      cdnFree_ = other.cdnFree_;
      crBuyOnMakersite_ = other.crBuyOnMakersite_;
      crUrlOnMakersite_ = other.crUrlOnMakersite_;
      serviceFeeOfOnlineMonth_ = other.serviceFeeOfOnlineMonth_;
      serviceFeeOfOnlineYear_ = other.serviceFeeOfOnlineYear_;
      serviceFeeOfAttorneyMonth_ = other.serviceFeeOfAttorneyMonth_;
      serviceFeeOfAttorneyYear_ = other.serviceFeeOfAttorneyYear_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FontMetaInfo Clone() {
      return new FontMetaInfo(this);
    }

    /// <summary>Field number for the "font_id" field.</summary>
    public const int FontIdFieldNumber = 1;
    private uint fontId_;
    /// <summary>
    ///字体id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FontId {
      get { return fontId_; }
      set {
        fontId_ = value;
      }
    }

    /// <summary>Field number for the "maker_id" field.</summary>
    public const int MakerIdFieldNumber = 2;
    private uint makerId_;
    /// <summary>
    ///厂商编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MakerId {
      get { return makerId_; }
      set {
        makerId_ = value;
      }
    }

    /// <summary>Field number for the "name_en" field.</summary>
    public const int NameEnFieldNumber = 3;
    private string nameEn_ = "";
    /// <summary>
    ///字体英文名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameEn {
      get { return nameEn_; }
      set {
        nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_cn" field.</summary>
    public const int NameCnFieldNumber = 4;
    private string nameCn_ = "";
    /// <summary>
    ///字体中文名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameCn {
      get { return nameCn_; }
      set {
        nameCn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_tw" field.</summary>
    public const int NameTwFieldNumber = 5;
    private string nameTw_ = "";
    /// <summary>
    ///字体繁体名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameTw {
      get { return nameTw_; }
      set {
        nameTw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_jp" field.</summary>
    public const int NameJpFieldNumber = 6;
    private string nameJp_ = "";
    /// <summary>
    ///字体日文名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameJp {
      get { return nameJp_; }
      set {
        nameJp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_kr" field.</summary>
    public const int NameKrFieldNumber = 7;
    private string nameKr_ = "";
    /// <summary>
    ///字体韩语名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameKr {
      get { return nameKr_; }
      set {
        nameKr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intro_en" field.</summary>
    public const int IntroEnFieldNumber = 8;
    private string introEn_ = "";
    /// <summary>
    ///英语介绍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IntroEn {
      get { return introEn_; }
      set {
        introEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intro_cn" field.</summary>
    public const int IntroCnFieldNumber = 9;
    private string introCn_ = "";
    /// <summary>
    ///中文介绍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IntroCn {
      get { return introCn_; }
      set {
        introCn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intro_tw" field.</summary>
    public const int IntroTwFieldNumber = 10;
    private string introTw_ = "";
    /// <summary>
    ///繁体中文介绍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IntroTw {
      get { return introTw_; }
      set {
        introTw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intro_jp" field.</summary>
    public const int IntroJpFieldNumber = 11;
    private string introJp_ = "";
    /// <summary>
    ///日语介绍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IntroJp {
      get { return introJp_; }
      set {
        introJp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intro_kr" field.</summary>
    public const int IntroKrFieldNumber = 12;
    private string introKr_ = "";
    /// <summary>
    ///韩语介绍
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IntroKr {
      get { return introKr_; }
      set {
        introKr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Webfontsdk.Language> _repeated_lang_codec
        = pb::FieldCodec.ForEnum(106, x => (int) x, x => (global::Webfontsdk.Language) x);
    private readonly pbc::RepeatedField<global::Webfontsdk.Language> lang_ = new pbc::RepeatedField<global::Webfontsdk.Language>();
    /// <summary>
    ///语系列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Webfontsdk.Language> Lang {
      get { return lang_; }
    }

    /// <summary>Field number for the "cr_price_month" field.</summary>
    public const int CrPriceMonthFieldNumber = 14;
    private int crPriceMonth_;
    /// <summary>
    ///版权授权价格：0代表免费，-1代表不允许按月购买
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CrPriceMonth {
      get { return crPriceMonth_; }
      set {
        crPriceMonth_ = value;
      }
    }

    /// <summary>Field number for the "cr_price_year" field.</summary>
    public const int CrPriceYearFieldNumber = 15;
    private int crPriceYear_;
    /// <summary>
    ///版权按年价格：0代表免费，-1代表不允许按年购买，都为-1则无法提供在线购买方式，
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CrPriceYear {
      get { return crPriceYear_; }
      set {
        crPriceYear_ = value;
      }
    }

    /// <summary>Field number for the "cr_price_cssdownload" field.</summary>
    public const int CrPriceCssdownloadFieldNumber = 16;
    private int crPriceCssdownload_;
    /// <summary>
    ///CSS文件下载价格,按次收费。298元左右,-1代表不允许下载css，0代表免费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CrPriceCssdownload {
      get { return crPriceCssdownload_; }
      set {
        crPriceCssdownload_ = value;
      }
    }

    /// <summary>Field number for the "cdn_free" field.</summary>
    public const int CdnFreeFieldNumber = 17;
    private bool cdnFree_;
    /// <summary>
    ///是否免cdn流量费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CdnFree {
      get { return cdnFree_; }
      set {
        cdnFree_ = value;
      }
    }

    /// <summary>Field number for the "cr_buy_on_makersite" field.</summary>
    public const int CrBuyOnMakersiteFieldNumber = 18;
    private bool crBuyOnMakersite_;
    /// <summary>
    ///是否可以在厂商官网购买
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CrBuyOnMakersite {
      get { return crBuyOnMakersite_; }
      set {
        crBuyOnMakersite_ = value;
      }
    }

    /// <summary>Field number for the "cr_url_on_makersite" field.</summary>
    public const int CrUrlOnMakersiteFieldNumber = 19;
    private string crUrlOnMakersite_ = "";
    /// <summary>
    ///当前字体在厂商的网址，如果为 "" 则自动使用厂商网址填充
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CrUrlOnMakersite {
      get { return crUrlOnMakersite_; }
      set {
        crUrlOnMakersite_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_fee_of_online_month" field.</summary>
    public const int ServiceFeeOfOnlineMonthFieldNumber = 20;
    private uint serviceFeeOfOnlineMonth_;
    /// <summary>
    ///通过在线购买的月服务费  0代表免费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServiceFeeOfOnlineMonth {
      get { return serviceFeeOfOnlineMonth_; }
      set {
        serviceFeeOfOnlineMonth_ = value;
      }
    }

    /// <summary>Field number for the "service_fee_of_online_year" field.</summary>
    public const int ServiceFeeOfOnlineYearFieldNumber = 21;
    private uint serviceFeeOfOnlineYear_;
    /// <summary>
    ///通过在线购买的年服务费   0代表免费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServiceFeeOfOnlineYear {
      get { return serviceFeeOfOnlineYear_; }
      set {
        serviceFeeOfOnlineYear_ = value;
      }
    }

    /// <summary>Field number for the "service_fee_of_attorney_month" field.</summary>
    public const int ServiceFeeOfAttorneyMonthFieldNumber = 22;
    private int serviceFeeOfAttorneyMonth_;
    /// <summary>
    ///通过上传授权书购买的月服务费   -1代表不允许上传授权书  0代表免费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServiceFeeOfAttorneyMonth {
      get { return serviceFeeOfAttorneyMonth_; }
      set {
        serviceFeeOfAttorneyMonth_ = value;
      }
    }

    /// <summary>Field number for the "service_fee_of_attorney_year" field.</summary>
    public const int ServiceFeeOfAttorneyYearFieldNumber = 23;
    private int serviceFeeOfAttorneyYear_;
    /// <summary>
    ///通过上传授权书购买的年服务费    -1代表不允许上传授权书  0代表免费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServiceFeeOfAttorneyYear {
      get { return serviceFeeOfAttorneyYear_; }
      set {
        serviceFeeOfAttorneyYear_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FontMetaInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FontMetaInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FontId != other.FontId) return false;
      if (MakerId != other.MakerId) return false;
      if (NameEn != other.NameEn) return false;
      if (NameCn != other.NameCn) return false;
      if (NameTw != other.NameTw) return false;
      if (NameJp != other.NameJp) return false;
      if (NameKr != other.NameKr) return false;
      if (IntroEn != other.IntroEn) return false;
      if (IntroCn != other.IntroCn) return false;
      if (IntroTw != other.IntroTw) return false;
      if (IntroJp != other.IntroJp) return false;
      if (IntroKr != other.IntroKr) return false;
      if(!lang_.Equals(other.lang_)) return false;
      if (CrPriceMonth != other.CrPriceMonth) return false;
      if (CrPriceYear != other.CrPriceYear) return false;
      if (CrPriceCssdownload != other.CrPriceCssdownload) return false;
      if (CdnFree != other.CdnFree) return false;
      if (CrBuyOnMakersite != other.CrBuyOnMakersite) return false;
      if (CrUrlOnMakersite != other.CrUrlOnMakersite) return false;
      if (ServiceFeeOfOnlineMonth != other.ServiceFeeOfOnlineMonth) return false;
      if (ServiceFeeOfOnlineYear != other.ServiceFeeOfOnlineYear) return false;
      if (ServiceFeeOfAttorneyMonth != other.ServiceFeeOfAttorneyMonth) return false;
      if (ServiceFeeOfAttorneyYear != other.ServiceFeeOfAttorneyYear) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FontId != 0) hash ^= FontId.GetHashCode();
      if (MakerId != 0) hash ^= MakerId.GetHashCode();
      if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
      if (NameCn.Length != 0) hash ^= NameCn.GetHashCode();
      if (NameTw.Length != 0) hash ^= NameTw.GetHashCode();
      if (NameJp.Length != 0) hash ^= NameJp.GetHashCode();
      if (NameKr.Length != 0) hash ^= NameKr.GetHashCode();
      if (IntroEn.Length != 0) hash ^= IntroEn.GetHashCode();
      if (IntroCn.Length != 0) hash ^= IntroCn.GetHashCode();
      if (IntroTw.Length != 0) hash ^= IntroTw.GetHashCode();
      if (IntroJp.Length != 0) hash ^= IntroJp.GetHashCode();
      if (IntroKr.Length != 0) hash ^= IntroKr.GetHashCode();
      hash ^= lang_.GetHashCode();
      if (CrPriceMonth != 0) hash ^= CrPriceMonth.GetHashCode();
      if (CrPriceYear != 0) hash ^= CrPriceYear.GetHashCode();
      if (CrPriceCssdownload != 0) hash ^= CrPriceCssdownload.GetHashCode();
      if (CdnFree != false) hash ^= CdnFree.GetHashCode();
      if (CrBuyOnMakersite != false) hash ^= CrBuyOnMakersite.GetHashCode();
      if (CrUrlOnMakersite.Length != 0) hash ^= CrUrlOnMakersite.GetHashCode();
      if (ServiceFeeOfOnlineMonth != 0) hash ^= ServiceFeeOfOnlineMonth.GetHashCode();
      if (ServiceFeeOfOnlineYear != 0) hash ^= ServiceFeeOfOnlineYear.GetHashCode();
      if (ServiceFeeOfAttorneyMonth != 0) hash ^= ServiceFeeOfAttorneyMonth.GetHashCode();
      if (ServiceFeeOfAttorneyYear != 0) hash ^= ServiceFeeOfAttorneyYear.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FontId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FontId);
      }
      if (MakerId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MakerId);
      }
      if (NameEn.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NameEn);
      }
      if (NameCn.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NameCn);
      }
      if (NameTw.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NameTw);
      }
      if (NameJp.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(NameJp);
      }
      if (NameKr.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(NameKr);
      }
      if (IntroEn.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(IntroEn);
      }
      if (IntroCn.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(IntroCn);
      }
      if (IntroTw.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(IntroTw);
      }
      if (IntroJp.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(IntroJp);
      }
      if (IntroKr.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(IntroKr);
      }
      lang_.WriteTo(output, _repeated_lang_codec);
      if (CrPriceMonth != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(CrPriceMonth);
      }
      if (CrPriceYear != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(CrPriceYear);
      }
      if (CrPriceCssdownload != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(CrPriceCssdownload);
      }
      if (CdnFree != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(CdnFree);
      }
      if (CrBuyOnMakersite != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(CrBuyOnMakersite);
      }
      if (CrUrlOnMakersite.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(CrUrlOnMakersite);
      }
      if (ServiceFeeOfOnlineMonth != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(ServiceFeeOfOnlineMonth);
      }
      if (ServiceFeeOfOnlineYear != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(ServiceFeeOfOnlineYear);
      }
      if (ServiceFeeOfAttorneyMonth != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ServiceFeeOfAttorneyMonth);
      }
      if (ServiceFeeOfAttorneyYear != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(ServiceFeeOfAttorneyYear);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FontId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FontId);
      }
      if (MakerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MakerId);
      }
      if (NameEn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
      }
      if (NameCn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameCn);
      }
      if (NameTw.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameTw);
      }
      if (NameJp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameJp);
      }
      if (NameKr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameKr);
      }
      if (IntroEn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IntroEn);
      }
      if (IntroCn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IntroCn);
      }
      if (IntroTw.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IntroTw);
      }
      if (IntroJp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IntroJp);
      }
      if (IntroKr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IntroKr);
      }
      size += lang_.CalculateSize(_repeated_lang_codec);
      if (CrPriceMonth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrPriceMonth);
      }
      if (CrPriceYear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrPriceYear);
      }
      if (CrPriceCssdownload != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CrPriceCssdownload);
      }
      if (CdnFree != false) {
        size += 2 + 1;
      }
      if (CrBuyOnMakersite != false) {
        size += 2 + 1;
      }
      if (CrUrlOnMakersite.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CrUrlOnMakersite);
      }
      if (ServiceFeeOfOnlineMonth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ServiceFeeOfOnlineMonth);
      }
      if (ServiceFeeOfOnlineYear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ServiceFeeOfOnlineYear);
      }
      if (ServiceFeeOfAttorneyMonth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ServiceFeeOfAttorneyMonth);
      }
      if (ServiceFeeOfAttorneyYear != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ServiceFeeOfAttorneyYear);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FontMetaInfo other) {
      if (other == null) {
        return;
      }
      if (other.FontId != 0) {
        FontId = other.FontId;
      }
      if (other.MakerId != 0) {
        MakerId = other.MakerId;
      }
      if (other.NameEn.Length != 0) {
        NameEn = other.NameEn;
      }
      if (other.NameCn.Length != 0) {
        NameCn = other.NameCn;
      }
      if (other.NameTw.Length != 0) {
        NameTw = other.NameTw;
      }
      if (other.NameJp.Length != 0) {
        NameJp = other.NameJp;
      }
      if (other.NameKr.Length != 0) {
        NameKr = other.NameKr;
      }
      if (other.IntroEn.Length != 0) {
        IntroEn = other.IntroEn;
      }
      if (other.IntroCn.Length != 0) {
        IntroCn = other.IntroCn;
      }
      if (other.IntroTw.Length != 0) {
        IntroTw = other.IntroTw;
      }
      if (other.IntroJp.Length != 0) {
        IntroJp = other.IntroJp;
      }
      if (other.IntroKr.Length != 0) {
        IntroKr = other.IntroKr;
      }
      lang_.Add(other.lang_);
      if (other.CrPriceMonth != 0) {
        CrPriceMonth = other.CrPriceMonth;
      }
      if (other.CrPriceYear != 0) {
        CrPriceYear = other.CrPriceYear;
      }
      if (other.CrPriceCssdownload != 0) {
        CrPriceCssdownload = other.CrPriceCssdownload;
      }
      if (other.CdnFree != false) {
        CdnFree = other.CdnFree;
      }
      if (other.CrBuyOnMakersite != false) {
        CrBuyOnMakersite = other.CrBuyOnMakersite;
      }
      if (other.CrUrlOnMakersite.Length != 0) {
        CrUrlOnMakersite = other.CrUrlOnMakersite;
      }
      if (other.ServiceFeeOfOnlineMonth != 0) {
        ServiceFeeOfOnlineMonth = other.ServiceFeeOfOnlineMonth;
      }
      if (other.ServiceFeeOfOnlineYear != 0) {
        ServiceFeeOfOnlineYear = other.ServiceFeeOfOnlineYear;
      }
      if (other.ServiceFeeOfAttorneyMonth != 0) {
        ServiceFeeOfAttorneyMonth = other.ServiceFeeOfAttorneyMonth;
      }
      if (other.ServiceFeeOfAttorneyYear != 0) {
        ServiceFeeOfAttorneyYear = other.ServiceFeeOfAttorneyYear;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FontId = input.ReadUInt32();
            break;
          }
          case 16: {
            MakerId = input.ReadUInt32();
            break;
          }
          case 26: {
            NameEn = input.ReadString();
            break;
          }
          case 34: {
            NameCn = input.ReadString();
            break;
          }
          case 42: {
            NameTw = input.ReadString();
            break;
          }
          case 50: {
            NameJp = input.ReadString();
            break;
          }
          case 58: {
            NameKr = input.ReadString();
            break;
          }
          case 66: {
            IntroEn = input.ReadString();
            break;
          }
          case 74: {
            IntroCn = input.ReadString();
            break;
          }
          case 82: {
            IntroTw = input.ReadString();
            break;
          }
          case 90: {
            IntroJp = input.ReadString();
            break;
          }
          case 98: {
            IntroKr = input.ReadString();
            break;
          }
          case 106:
          case 104: {
            lang_.AddEntriesFrom(input, _repeated_lang_codec);
            break;
          }
          case 112: {
            CrPriceMonth = input.ReadInt32();
            break;
          }
          case 120: {
            CrPriceYear = input.ReadInt32();
            break;
          }
          case 128: {
            CrPriceCssdownload = input.ReadInt32();
            break;
          }
          case 136: {
            CdnFree = input.ReadBool();
            break;
          }
          case 144: {
            CrBuyOnMakersite = input.ReadBool();
            break;
          }
          case 154: {
            CrUrlOnMakersite = input.ReadString();
            break;
          }
          case 160: {
            ServiceFeeOfOnlineMonth = input.ReadUInt32();
            break;
          }
          case 168: {
            ServiceFeeOfOnlineYear = input.ReadUInt32();
            break;
          }
          case 176: {
            ServiceFeeOfAttorneyMonth = input.ReadInt32();
            break;
          }
          case 184: {
            ServiceFeeOfAttorneyYear = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetUseRateRequest : pb::IMessage<GetUseRateRequest> {
    private static readonly pb::MessageParser<GetUseRateRequest> _parser = new pb::MessageParser<GetUseRateRequest>(() => new GetUseRateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetUseRateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUseRateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUseRateRequest(GetUseRateRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUseRateRequest Clone() {
      return new GetUseRateRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetUseRateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetUseRateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetUseRateRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class UseRate : pb::IMessage<UseRate> {
    private static readonly pb::MessageParser<UseRate> _parser = new pb::MessageParser<UseRate>(() => new UseRate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UseRate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseRate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseRate(UseRate other) : this() {
      fontId_ = other.fontId_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseRate Clone() {
      return new UseRate(this);
    }

    /// <summary>Field number for the "font_id" field.</summary>
    public const int FontIdFieldNumber = 1;
    private uint fontId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FontId {
      get { return fontId_; }
      set {
        fontId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UseRate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UseRate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FontId != other.FontId) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FontId != 0) hash ^= FontId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FontId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FontId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FontId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FontId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UseRate other) {
      if (other == null) {
        return;
      }
      if (other.FontId != 0) {
        FontId = other.FontId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FontId = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetUseRateResult : pb::IMessage<GetUseRateResult> {
    private static readonly pb::MessageParser<GetUseRateResult> _parser = new pb::MessageParser<GetUseRateResult>(() => new GetUseRateResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetUseRateResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUseRateResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUseRateResult(GetUseRateResult other) : this() {
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetUseRateResult Clone() {
      return new GetUseRateResult(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pbc::MapField<uint, uint>.Codec _map_items_codec
        = new pbc::MapField<uint, uint>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForUInt32(16, 0), 10);
    private readonly pbc::MapField<uint, uint> items_ = new pbc::MapField<uint, uint>();
    /// <summary>
    ///repeated UseRate items=1;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, uint> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetUseRateResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetUseRateResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Items.Equals(other.Items)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Items.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _map_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_map_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetUseRateResult other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            items_.AddEntriesFrom(input, _map_items_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// GetAccessKeyInfoRequest 获得完整的AccessKey信息(查)
  /// </summary>
  public sealed partial class GetAccessKeyInfoRequest : pb::IMessage<GetAccessKeyInfoRequest> {
    private static readonly pb::MessageParser<GetAccessKeyInfoRequest> _parser = new pb::MessageParser<GetAccessKeyInfoRequest>(() => new GetAccessKeyInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAccessKeyInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccessKeyInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccessKeyInfoRequest(GetAccessKeyInfoRequest other) : this() {
      accesskey_ = other.accesskey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAccessKeyInfoRequest Clone() {
      return new GetAccessKeyInfoRequest(this);
    }

    /// <summary>Field number for the "accesskey" field.</summary>
    public const int AccesskeyFieldNumber = 1;
    private string accesskey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Accesskey {
      get { return accesskey_; }
      set {
        accesskey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAccessKeyInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAccessKeyInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accesskey != other.Accesskey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Accesskey.Length != 0) hash ^= Accesskey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Accesskey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Accesskey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Accesskey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Accesskey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAccessKeyInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.Accesskey.Length != 0) {
        Accesskey = other.Accesskey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Accesskey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// CheckAccessKeyRequest 检查用户的字体ID是否存在(查)
  /// </summary>
  public sealed partial class CheckAccessKeyRequest : pb::IMessage<CheckAccessKeyRequest> {
    private static readonly pb::MessageParser<CheckAccessKeyRequest> _parser = new pb::MessageParser<CheckAccessKeyRequest>(() => new CheckAccessKeyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckAccessKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckAccessKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckAccessKeyRequest(CheckAccessKeyRequest other) : this() {
      userUid_ = other.userUid_;
      fontId_ = other.fontId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckAccessKeyRequest Clone() {
      return new CheckAccessKeyRequest(this);
    }

    /// <summary>Field number for the "user_uid" field.</summary>
    public const int UserUidFieldNumber = 1;
    private ulong userUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserUid {
      get { return userUid_; }
      set {
        userUid_ = value;
      }
    }

    /// <summary>Field number for the "font_id" field.</summary>
    public const int FontIdFieldNumber = 2;
    private uint fontId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FontId {
      get { return fontId_; }
      set {
        fontId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckAccessKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckAccessKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserUid != other.UserUid) return false;
      if (FontId != other.FontId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserUid != 0UL) hash ^= UserUid.GetHashCode();
      if (FontId != 0) hash ^= FontId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserUid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserUid);
      }
      if (FontId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FontId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserUid);
      }
      if (FontId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FontId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckAccessKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserUid != 0UL) {
        UserUid = other.UserUid;
      }
      if (other.FontId != 0) {
        FontId = other.FontId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserUid = input.ReadUInt64();
            break;
          }
          case 16: {
            FontId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///AddAccessKeyRequest 新增一个accesskey(增)
  /// </summary>
  public sealed partial class MakesureAccessKeyRequest : pb::IMessage<MakesureAccessKeyRequest> {
    private static readonly pb::MessageParser<MakesureAccessKeyRequest> _parser = new pb::MessageParser<MakesureAccessKeyRequest>(() => new MakesureAccessKeyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MakesureAccessKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakesureAccessKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakesureAccessKeyRequest(MakesureAccessKeyRequest other) : this() {
      userUid_ = other.userUid_;
      fontId_ = other.fontId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakesureAccessKeyRequest Clone() {
      return new MakesureAccessKeyRequest(this);
    }

    /// <summary>Field number for the "user_uid" field.</summary>
    public const int UserUidFieldNumber = 1;
    private ulong userUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserUid {
      get { return userUid_; }
      set {
        userUid_ = value;
      }
    }

    /// <summary>Field number for the "font_id" field.</summary>
    public const int FontIdFieldNumber = 2;
    private uint fontId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FontId {
      get { return fontId_; }
      set {
        fontId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MakesureAccessKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MakesureAccessKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserUid != other.UserUid) return false;
      if (FontId != other.FontId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserUid != 0UL) hash ^= UserUid.GetHashCode();
      if (FontId != 0) hash ^= FontId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserUid != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UserUid);
      }
      if (FontId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FontId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserUid);
      }
      if (FontId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FontId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MakesureAccessKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserUid != 0UL) {
        UserUid = other.UserUid;
      }
      if (other.FontId != 0) {
        FontId = other.FontId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserUid = input.ReadUInt64();
            break;
          }
          case 16: {
            FontId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 一个完整的AccessInfo
  /// </summary>
  public sealed partial class AccessKeyInfo : pb::IMessage<AccessKeyInfo> {
    private static readonly pb::MessageParser<AccessKeyInfo> _parser = new pb::MessageParser<AccessKeyInfo>(() => new AccessKeyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessKeyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Webfontsdk.WebfontReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessKeyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessKeyInfo(AccessKeyInfo other) : this() {
      accesskey_ = other.accesskey_;
      userUid_ = other.userUid_;
      fontId_ = other.fontId_;
      addTime_ = other.addTime_;
      uuid_ = other.uuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessKeyInfo Clone() {
      return new AccessKeyInfo(this);
    }

    /// <summary>Field number for the "accesskey" field.</summary>
    public const int AccesskeyFieldNumber = 1;
    private string accesskey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Accesskey {
      get { return accesskey_; }
      set {
        accesskey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_uid" field.</summary>
    public const int UserUidFieldNumber = 2;
    private ulong userUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserUid {
      get { return userUid_; }
      set {
        userUid_ = value;
      }
    }

    /// <summary>Field number for the "font_id" field.</summary>
    public const int FontIdFieldNumber = 3;
    private uint fontId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FontId {
      get { return fontId_; }
      set {
        fontId_ = value;
      }
    }

    /// <summary>Field number for the "add_time" field.</summary>
    public const int AddTimeFieldNumber = 4;
    private long addTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AddTime {
      get { return addTime_; }
      set {
        addTime_ = value;
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 5;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessKeyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessKeyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accesskey != other.Accesskey) return false;
      if (UserUid != other.UserUid) return false;
      if (FontId != other.FontId) return false;
      if (AddTime != other.AddTime) return false;
      if (Uuid != other.Uuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Accesskey.Length != 0) hash ^= Accesskey.GetHashCode();
      if (UserUid != 0UL) hash ^= UserUid.GetHashCode();
      if (FontId != 0) hash ^= FontId.GetHashCode();
      if (AddTime != 0L) hash ^= AddTime.GetHashCode();
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Accesskey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Accesskey);
      }
      if (UserUid != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserUid);
      }
      if (FontId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FontId);
      }
      if (AddTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AddTime);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Uuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Accesskey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Accesskey);
      }
      if (UserUid != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserUid);
      }
      if (FontId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FontId);
      }
      if (AddTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AddTime);
      }
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessKeyInfo other) {
      if (other == null) {
        return;
      }
      if (other.Accesskey.Length != 0) {
        Accesskey = other.Accesskey;
      }
      if (other.UserUid != 0UL) {
        UserUid = other.UserUid;
      }
      if (other.FontId != 0) {
        FontId = other.FontId;
      }
      if (other.AddTime != 0L) {
        AddTime = other.AddTime;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Accesskey = input.ReadString();
            break;
          }
          case 16: {
            UserUid = input.ReadUInt64();
            break;
          }
          case 24: {
            FontId = input.ReadUInt32();
            break;
          }
          case 32: {
            AddTime = input.ReadInt64();
            break;
          }
          case 42: {
            Uuid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
